<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android开发笔记</title>
    <url>/Android%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>Android项目的一般结构:</p>
<pre class="line-numbers language-none"><code class="language-none">一般项目结构图:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<span id="more"></span>

<p>Android主配置文件 AndroidManifest.xml</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>
    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.myapplication2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>
        <span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/ic_launcher_background<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>roundIcon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher_round<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>supportsRtl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/Theme.MyApplication2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>
            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/Theme.MyApplication2.NoActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token comment">&lt;!--  绑定程序入口主事件--></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>java文件树</p>
<p>存放java代码(如果该android项目是由java语言编写)<br>android studio 在生成项目时会自动生成相应的包,在java文件目录下,又细分未java程序代码以及相应的测试,使用了junit测试工具测试功能模块是否达到预期效果</p>
<p>res文件树</p>
<p>res文件树下又细分为layout,drawable,menu,mipmap,values等等文件夹<br>layout:存放每个activity的界面布局文件<br>drawable:存放项目中图片的在各种不同分辨率下的显示的对应的形式图片,为了保证程序在不同设备之间可以相互兼容<br>menu: 如果你的项目使用了菜单控件,则会通过menu文件夹绑定相应的菜单控件。</p>
<h3 id="以上：-指的是在app，即android-studio自动生成的一种项目文件形式"><a href="#以上：-指的是在app，即android-studio自动生成的一种项目文件形式" class="headerlink" title="以上： 指的是在app，即android studio自动生成的一种项目文件形式"></a>以上： 指的是在app，即android studio自动生成的一种项目文件形式</h3><h3 id="以下：-是在windows文件资源管理器下的Project结构"><a href="#以下：-是在windows文件资源管理器下的Project结构" class="headerlink" title="以下： 是在windows文件资源管理器下的Project结构"></a>以下： 是在windows文件资源管理器下的Project结构</h3><!-- //插入图片 -->

<p>在该形式下：我们可以明显看出,这个android项目,其实就是一个java se小项目引入了android SDK,以及Gradle工具包,与此同时还有一些其他的External Libraries 工具包</p>
<p>可以理解就是一个java项目集成了一套android现有的开发框架</p>
<p>具体一些其他的细节操作，可以在后续内容中得以体现</p>
<h2 id="一些奇奇怪怪又特别常见的名词"><a href="#一些奇奇怪怪又特别常见的名词" class="headerlink" title="一些奇奇怪怪又特别常见的名词"></a>一些奇奇怪怪又特别常见的名词</h2><p>wrap_content: 使控件恰好可以包住里面的东西，比如文字<br>match_content: 使控件的width或者height和父控件一致</p>
]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM编程       -----BASE</title>
    <url>/DOM/</url>
    <content><![CDATA[<h1 id="文档对象模型DOM"><a href="#文档对象模型DOM" class="headerlink" title="文档对象模型DOM"></a>文档对象模型DOM</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><strong>分层结构</strong><br><strong>与平台无关</strong><br><strong>与浏览器无关</strong><br><strong>与语言无关</strong><br><strong>在DOM中，每个对象都可以成为一个节点Node</strong></p>
<h3 id="节点的概念"><a href="#节点的概念" class="headerlink" title="节点的概念"></a>节点的概念</h3><h4 id="根节点"><a href="#根节点" class="headerlink" title="根节点"></a>根节点</h4><p><strong>最顶层的html节点</strong></p>
<h4 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h4><p><strong>eg:html就是body和head的父节点</strong></p>
<h4 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h4><p><strong>直系节点就是子节点</strong></p>
<h4 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><p><strong>同一层，同一个爸爸</strong></p>
<h4 id="后代"><a href="#后代" class="headerlink" title="后代"></a>后代</h4><p><strong>顾名思义</strong></p>
<h4 id="叶子节点"><a href="#叶子节点" class="headerlink" title="叶子节点"></a>叶子节点</h4><p><strong>树形结构最底部的节点成为叶子节点</strong></p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><strong>用于访问站点中的数据脚本以及表现层对象</strong></p>
<h2 id="节点属性表"><a href="#节点属性表" class="headerlink" title="节点属性表"></a>节点属性表</h2><table>
<thead>
<tr>
<th>属性名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>nodeName</td>
<td align="center">节点名称</td>
</tr>
<tr>
<td>nodeValue</td>
<td align="center">节点值,一般用于文本框</td>
</tr>
<tr>
<td>nodeType</td>
<td align="center">节点类型</td>
</tr>
<tr>
<td>parentNode</td>
<td align="center">返回当前节点的父节点</td>
</tr>
<tr>
<td>childNode</td>
<td align="center">子节点列表</td>
</tr>
<tr>
<td>firstChild</td>
<td align="center">返回当前节点的第一个子节点</td>
</tr>
<tr>
<td>lastChild</td>
<td align="center">返回当前节点的最有一个子节点</td>
</tr>
<tr>
<td>previousSibling</td>
<td align="center">返回当前节点前一个兄弟节点</td>
</tr>
<tr>
<td>nextSibling</td>
<td align="center">返回当前节点的后一个兄弟节点</td>
</tr>
<tr>
<td>attributes</td>
<td align="center">元素的属性列表</td>
</tr>
</tbody></table>
<h2 id="如何操作节点–OPTIONS"><a href="#如何操作节点–OPTIONS" class="headerlink" title="如何操作节点–OPTIONS"></a>如何操作节点–OPTIONS</h2><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><blockquote>
<p>createElement(‘div’)  –创建div节点</p>
</blockquote>
<blockquote>
<p>createTextNode()  – 创建文本节点，然后将该文本节点成为div的子节点</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    <span class="token keyword">function</span> <span class="token function">completePoem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//定义completePoem()函数</span>
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建div元素</span>
        div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'poem'</span><span class="token punctuation">;</span><span class="token comment">//为div元素添加CSS类</span>
        <span class="token keyword">var</span> last <span class="token operator">=</span> myform<span class="token punctuation">.</span>last<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment">//获取用户输入的古诗最后一句</span>
        txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建文本节点</span>
        div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将文本节点添加到创建的div元素中</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'poemDiv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将创建的div元素添加到id为poemDiv的div元素中</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>我去，盒子里面装盒子<span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"poemDiv"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poemtitle"</span><span class="token operator">></span>春晓<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem"</span><span class="token operator">></span>春眠不觉晓<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem"</span><span class="token operator">></span>处处闻啼鸟<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem"</span><span class="token operator">></span>夜来风雨声<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">"myform"</span><span class="token operator">></span>
    请输入最后一句：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"last"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"添加"</span> onClick<span class="token operator">=</span><span class="token string">"completePoem()"</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><blockquote>
<p>obj.insertBeforce(new,ref)  –new表示新的节点，ref指定一个节点，在该节点之前插入</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>head<span class="token operator">></span>
    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>title<span class="token operator">></span>插入节点<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>
    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
        <span class="token keyword">function</span> <span class="token function">crNode</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建节点的函数</span>
            <span class="token keyword">var</span> newP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建p元素</span>
            <span class="token keyword">var</span> newTxt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建文本节点</span>
            newP<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newTxt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将文本节点添加到创建的p元素中</span>
            <span class="token keyword">return</span> newP<span class="token punctuation">;</span><span class="token comment">//返回创建的p元素</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">function</span> <span class="token function">insetNode</span><span class="token punctuation">(</span><span class="token parameter">nodeId<span class="token punctuation">,</span> str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//插入节点的函数</span>
            <span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取指定id的元素</span>
            <span class="token keyword">var</span> newNode <span class="token operator">=</span> <span class="token function">crNode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span>		<span class="token comment">//判断是否拥有父节点，如果是html标签那肯定不行</span>
                node<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将创建的节点插入到指定元素的前面</span>
        <span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>
<span class="token operator">&lt;</span>body background<span class="token operator">=</span><span class="token string">"bg.gif"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"h"</span><span class="token operator">></span>在上面插入节点<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
<span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"frm"</span> name<span class="token operator">=</span><span class="token string">"frm"</span><span class="token operator">></span>
    输入文本：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"txt"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"前插入"</span> onclick<span class="token operator">=</span><span class="token string">"insetNode('h',document.frm.txt.value);"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><blockquote>
<p>obj.cloneNode(deep)   –deep为bool值，是否选择深度复制(连子节点都复制)</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//通常都是浅复制，最后将复制的结果插入到obj的子节点里面</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><blockquote>
<p>obj.removeChild(oldchild) –删除</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//直接删除就好了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><blockquote>
<p>obj.replaceChild(new,old)</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//创建新节点</span>
<span class="token comment">//替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="DOM获取元素的几个方法"><a href="#DOM获取元素的几个方法" class="headerlink" title="DOM获取元素的几个方法"></a>DOM获取元素的几个方法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">getElementByName</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
<span class="token comment">//前后端交互使用Name,别忘了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="innerHTML-innerText"><a href="#innerHTML-innerText" class="headerlink" title="innerHTML | innerText"></a>innerHTML | innerText</h2><blockquote>
<p>innerHTML 声明元素含有的HTML文本,不包括元素本身的开始结束标记,可随意替换指定元素的替换内容</p>
</blockquote>
<blockquote>
<p>innerText 声明指定元素的文本，并且会让其只显示里面的文字内容(自动除去标签)</p>
</blockquote>
<h2 id="outerHTML-outerText"><a href="#outerHTML-outerText" class="headerlink" title="outerHTML | outerText"></a>outerHTML | outerText</h2><p>这两儿类似，但是将整个节点都替换掉,不仅仅是内容</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>Servelt       -----BASE</title>
    <url>/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F-JAVAWEB/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>servelt</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript语法 -----BASE</title>
    <url>/JavaScript%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="嵌入方法"><a href="#嵌入方法" class="headerlink" title="嵌入方法"></a>嵌入方法</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html">//通过javascript:调用js的函数或方法
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript: alert(<span class="token punctuation">"</span></span><span class="token attr-name">")"</span><span class="token punctuation">></span></span>单机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    xxxxx<span class="token operator">...</span><span class="token operator">...</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><table>
<thead>
<tr>
<th>num</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td align="center">大小写敏感</td>
</tr>
<tr>
<td>2</td>
<td align="center">空格换行</td>
</tr>
<tr>
<td>3</td>
<td align="center">可以没有;</td>
</tr>
<tr>
<td>4</td>
<td align="center">注释方法和C语言一致</td>
</tr>
<tr>
<td>5</td>
<td align="center">执行顺序：逐行执行</td>
</tr>
</tbody></table>
<h2 id="几个特殊值"><a href="#几个特殊值" class="headerlink" title="几个特殊值"></a>几个特殊值</h2><table>
<thead>
<tr>
<th>值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>Infinity</td>
<td align="center">超过了js可以表示的最大值的数字</td>
</tr>
<tr>
<td>NaN</td>
<td align="center">非数字，运算过程中产生了未知的结果或错误</td>
</tr>
<tr>
<td>null</td>
<td align="center">空值–定义空的或不存在的引用  null并不是（””）或0</td>
</tr>
<tr>
<td>未定义值</td>
<td align="center">undefined,表示变量还没有赋值</td>
</tr>
</tbody></table>
<h2 id="几个特别的运算符"><a href="#几个特别的运算符" class="headerlink" title="几个特别的运算符"></a>几个特别的运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td align="center">仅仅队表面值进行判断</td>
</tr>
<tr>
<td>===</td>
<td align="center">表面值和数据类型同时判断</td>
</tr>
<tr>
<td>!=</td>
<td align="center">表面是否相等</td>
</tr>
<tr>
<td>!==</td>
<td align="center">不绝对等于</td>
</tr>
</tbody></table>
<h2 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//用于判断操作数的数据类型,返回一个字符串.</span>
a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>
<span class="token comment">//输出number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="new运算符"><a href="#new运算符" class="headerlink" title="new运算符"></a>new运算符</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span> <span class="token comment">//创建自定义对象</span>
Arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//创建数组</span>
Dat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"August 8 2008"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建日期对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="类型转换规则"><a href="#类型转换规则" class="headerlink" title="类型转换规则"></a>类型转换规则</h2><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>
    SomeOp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Error对象"><a href="#Error对象" class="headerlink" title="Error对象"></a>Error对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Error对象有两个属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="throw抛出异常"><a href="#throw抛出异常" class="headerlink" title="throw抛出异常"></a>throw抛出异常</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'some error orruring !'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>———function————</p>
<h3 id="定义创建"><a href="#定义创建" class="headerlink" title="定义创建"></a>定义创建</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token comment">//可以return ,可以有形参</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// First Way</span>

<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">""</span> onClick<span class="token operator">=</span><span class="token string">"fun();"</span><span class="token operator">></span>  <span class="token comment">//Second Way</span>

<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:fun()"</span><span class="token operator">></span>触发函数<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>  <span class="token comment">//Third Way</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> num<span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h3><p>和C语言一致规则</p>
<h3 id="一些内置函数"><a href="#一些内置函数" class="headerlink" title="一些内置函数"></a>一些内置函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th align="center">complain</th>
</tr>
</thead>
<tbody><tr>
<td>parseInt()</td>
<td align="center">字符串转转整型</td>
</tr>
<tr>
<td>parseFloat()</td>
<td align="center">字符串转浮点型</td>
</tr>
<tr>
<td>isNaN()</td>
<td align="center">判断是否NaN</td>
</tr>
<tr>
<td>isFinite()</td>
<td align="center">判断数字是否有限</td>
</tr>
<tr>
<td>eval()</td>
<td align="center">求字符串中表达式的值</td>
</tr>
<tr>
<td>encodeURI()</td>
<td align="center">将URI字符串进行编码</td>
</tr>
<tr>
<td>decodeURI()</td>
<td align="center">对已经编码的URI字符串进行解码</td>
</tr>
</tbody></table>
<p>eg:encodeURI()</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token string">"hhttp://r-ovo-stack.gitee.io/photo-stack-1/"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">name</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="使用Function-构造函数"><a href="#使用Function-构造函数" class="headerlink" title="使用Function()构造函数"></a>使用Function()构造函数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"参"</span><span class="token punctuation">,</span><span class="token string">"参"</span><span class="token punctuation">,</span><span class="token string">"参"</span><span class="token punctuation">,</span><span class="token string">"函数体"</span><span class="token punctuation">)</span>
eg<span class="token operator">:</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"console.log(a+b);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h2><h3 id="直接创建方式"><a href="#直接创建方式" class="headerlink" title="直接创建方式"></a>直接创建方式</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">eg<span class="token operator">:</span>
<span class="token keyword">var</span> student<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">"A"</span><span class="token punctuation">,</span>
    sex<span class="token operator">:</span><span class="token string">"boy"</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">20</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="自定义构造函数创建对象–我觉得这个是最实用的"><a href="#自定义构造函数创建对象–我觉得这个是最实用的" class="headerlink" title="自定义构造函数创建对象–我觉得这个是最实用的"></a>自定义构造函数创建对象–我觉得这个是最实用的</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">showName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">showSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> stu1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stu1<span class="token punctuation">.</span><span class="token function">showSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stu1<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="通过Object对象创建自定义对象"><a href="#通过Object对象创建自定义对象" class="headerlink" title="通过Object对象创建自定义对象"></a>通过Object对象创建自定义对象</h3> <pre class="line-numbers language-js" data-language="js"><code class="language-js"> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 eg<span class="token operator">:</span>
<span class="token keyword">var</span> student<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
student<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>
student<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="对象访问for-in-—–特别常用"><a href="#对象访问for-in-—–特别常用" class="headerlink" title="对象访问for in  —–特别常用"></a>对象访问for in  —–特别常用</h2><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>user<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> ex <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"属性: "</span><span class="token punctuation">,</span>ex<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>ex<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><h3 id="随机数random"><a href="#随机数random" class="headerlink" title="随机数random()"></a>随机数random()</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回0-1之间的随机数</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">//返回&lt;=x的最大整数</span>
Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Math常量"><a href="#Math常量" class="headerlink" title="Math常量"></a>Math常量</h3><table>
<thead>
<tr>
<th>常量</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>E</td>
<td align="center">自然对数</td>
</tr>
<tr>
<td>LN2</td>
<td align="center">2的自然对数</td>
</tr>
<tr>
<td>PI</td>
<td align="center">圆周率</td>
</tr>
</tbody></table>
<h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//床架Date对象</span>
date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateValue<span class="token punctuation">)</span>
date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>date<span class="token punctuation">[</span><span class="token punctuation">,</span>hour<span class="token punctuation">[</span><span class="token punctuation">,</span>minutes<span class="token punctuation">[</span><span class="token punctuation">,</span>seconds<span class="token punctuation">[</span><span class="token punctuation">,</span>ms<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="数组-–-important"><a href="#数组-–-important" class="headerlink" title="数组  – important"></a>数组  – important</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">arr<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
指定长度
arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>

指定数组元素
arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"heheh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

直接定义
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"ff"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="for遍历"><a href="#for遍历" class="headerlink" title="for遍历"></a>for遍历</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length；i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="元素增删改查"><a href="#元素增删改查" class="headerlink" title="元素增删改查"></a>元素增删改查</h3><table>
<thead>
<tr>
<th>操作</th>
<th align="center">方法</th>
</tr>
</thead>
<tbody><tr>
<td>添加</td>
<td align="center">直接在对应下标赋值即可</td>
</tr>
<tr>
<td>修改</td>
<td align="center">和添加同样的操作</td>
</tr>
<tr>
<td>删除</td>
<td align="center">delete arr[1]; 将对应下标元素值改为undefined,但数组实际长度并未减小</td>
</tr>
<tr>
<td>查找</td>
<td align="center">废话不多说</td>
</tr>
</tbody></table>
<h3 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>concat()</td>
<td align="center">连接连个以上的数组，并返回结果</td>
</tr>
<tr>
<td>push()</td>
<td align="center">末尾增加一个或多个元素，返回长度</td>
</tr>
<tr>
<td>unshift()</td>
<td align="center">头插一个或多个元素，返回新的长度</td>
</tr>
<tr>
<td>pop()</td>
<td align="center">尾删</td>
</tr>
<tr>
<td>shift()</td>
<td align="center">头删</td>
</tr>
<tr>
<td>splice()</td>
<td align="center">删除元素，并向数组添加新元素</td>
</tr>
<tr>
<td>reverse()</td>
<td align="center">反转数组</td>
</tr>
<tr>
<td>sort()</td>
<td align="center">排序</td>
</tr>
<tr>
<td>slice(start,end)</td>
<td align="center">从已有数组返回选定元素—切片的意思</td>
</tr>
<tr>
<td>toString()</td>
<td align="center">把数组转换为字符串</td>
</tr>
<tr>
<td>toLocalString()</td>
<td align="center">把数组转换为本地字符串，返回结果</td>
</tr>
<tr>
<td>join()</td>
<td align="center">把数组的所有元素放入一个字符串，元素通过指定的分隔符进行分割</td>
</tr>
<tr>
<td>split()</td>
<td align="center">将字符串通过指定的分隔符进行分割并转换为数组</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span>eg<span class="token operator">:</span>
<span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">"mr|mrbook|mrsoft"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> nameArr <span class="token operator">=</span> xmlObj<span class="token punctuation">.</span>responseText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将返回值分割为数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="数组prototype属性"><a href="#数组prototype属性" class="headerlink" title="数组prototype属性"></a>数组prototype属性</h3><p>用于给数组添加操作方法或属性</p>
<h2 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h2><table>
<thead>
<tr>
<th>成员名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>length属性</td>
<td align="center">返回字符串长度</td>
</tr>
<tr>
<td>charAt(num)</td>
<td align="center">返回指定位置的字符</td>
</tr>
<tr>
<td>lastIndexOf(“子”,”总”)</td>
<td align="center">返回某个子字符串在字符串中最后出现的位置</td>
</tr>
<tr>
<td>slice(startIndex,endIndex)</td>
<td align="center">截取字符串片段并返回–如果start&lt;0,则从尾部开始截取,不包括endIndex下标字符</td>
</tr>
<tr>
<td>substr(startIndex,length)</td>
<td align="center">从某个位置开始提取指定长度的子字符串,如果没length,则默认到末尾</td>
</tr>
<tr>
<td>substring(startIndex,endIndex)</td>
<td align="center">提取字符串中两个指定索引号之间的字符,同样不包含endIndex,start,end必须为非负整数</td>
</tr>
<tr>
<td>toLowerCase()</td>
<td align="center">大-&gt;小写</td>
</tr>
<tr>
<td>toUpperCase()</td>
<td align="center">小-&gt;大写</td>
</tr>
<tr>
<td>concat()</td>
<td align="center">连接</td>
</tr>
<tr>
<td>stringobj.split(separator,limit)</td>
<td align="center">sep为指定分隔符,limit为目标数组的最大长度</td>
</tr>
</tbody></table>
<h3 id="String格式化"><a href="#String格式化" class="headerlink" title="String格式化"></a>String格式化</h3><h2 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h2><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。<br>forEach() 对于空数组不会执行回调函数。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//语法</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>





<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//eg:</span>
<span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"numbers.forEach(myFunction)"</span><span class="token operator">></span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
 
<span class="token operator">&lt;</span>script<span class="token operator">></span>
demoP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    demoP<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> demoP<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span> <span class="token string">"index["</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">"]: "</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="JS常用事件"><a href="#JS常用事件" class="headerlink" title="JS常用事件"></a>JS常用事件</h3><h4 id="鼠标键盘事件"><a href="#鼠标键盘事件" class="headerlink" title="鼠标键盘事件"></a>鼠标键盘事件</h4><table>
<thead>
<tr>
<th>事件</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td align="center">单击时触发</td>
</tr>
<tr>
<td>onmousedown</td>
<td align="center">按下触发</td>
</tr>
<tr>
<td>ondblclick</td>
<td align="center">双击触发</td>
</tr>
<tr>
<td>onmouseup</td>
<td align="center">鼠标松开</td>
</tr>
<tr>
<td>onmoouseover</td>
<td align="center">鼠标在对象上方触发</td>
</tr>
<tr>
<td>onmousemove</td>
<td align="center">鼠标移动触发</td>
</tr>
<tr>
<td>onmouseout</td>
<td align="center">鼠标离开对象触发</td>
</tr>
<tr>
<td>onkeypress</td>
<td align="center">键盘某按键按下并松开</td>
</tr>
<tr>
<td>onkeydown</td>
<td align="center">键盘某按键按下</td>
</tr>
<tr>
<td>onkeyup</td>
<td align="center">键盘某按键松开</td>
</tr>
</tbody></table>
<h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><table>
<thead>
<tr>
<th>事件</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>onfocus</td>
<td align="center">元素获得焦点</td>
</tr>
<tr>
<td>onblur</td>
<td align="center">元素失去焦点</td>
</tr>
<tr>
<td>onchange</td>
<td align="center">元素失去焦点并且内容发生改变</td>
</tr>
<tr>
<td>onsubmit</td>
<td align="center">提交暗怒</td>
</tr>
<tr>
<td>onrest</td>
<td align="center">RESET属性被激活触发</td>
</tr>
</tbody></table>
<h4 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h4><table>
<thead>
<tr>
<th>事件</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>onload</td>
<td align="center">页面内容加载事件</td>
</tr>
<tr>
<td>onunload</td>
<td align="center">页面将要改变时触发</td>
</tr>
<tr>
<td>onresize</td>
<td align="center">浏览器窗口大小被改变时触发</td>
</tr>
</tbody></table>
<h2 id="事件名称必须小写"><a href="#事件名称必须小写" class="headerlink" title="事件名称必须小写"></a>事件名称必须小写</h2><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>window对象的一个属性event,event对象只能在事件发生时被访问,事件处理完成,event就会消失<br>DOM规定event必须作为唯一参数传递给事件处理函数</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//标准事件处理方法</span>
<span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>window.event对象的srcElenent属性在部分浏览器中需要用target代替<br>返回发生事件的元素名称</p>
<h2 id="表单与后端的数据衔接是通过表单中的name属性，而不是id"><a href="#表单与后端的数据衔接是通过表单中的name属性，而不是id" class="headerlink" title="表单与后端的数据衔接是通过表单中的name属性，而不是id"></a>表单与后端的数据衔接是通过表单中的name属性，而不是id</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//表单提交方法格式</span>
<span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">""</span> onsubmit<span class="token operator">=</span><span class="token string">"return Funname"</span> onreset<span class="token operator">=</span><span class="token string">"return Funname"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
<span class="token comment">// Funname返回一个布尔型值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="文档对象-document-常用方法"><a href="#文档对象-document-常用方法" class="headerlink" title="文档对象(document)常用方法"></a>文档对象(document)常用方法</h2><table>
<thead>
<tr>
<th>方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>close()</td>
<td align="center">关闭文档输出流</td>
</tr>
<tr>
<td>open()</td>
<td align="center">打开一个输出流并接受write/writeln方法创建页面内容</td>
</tr>
<tr>
<td>write()</td>
<td align="center">向文档写入hTML或JS语句，并以换行符结束</td>
</tr>
<tr>
<td>createElemen写入hTML或JS语句</td>
<td align="center"></td>
</tr>
<tr>
<td>writeln</td>
<td align="center">向文档t</td>
</tr>
<tr>
<td>getElenentById</td>
<td align="center">获取指定id标记</td>
</tr>
</tbody></table>
<h2 id="document常用属性"><a href="#document常用属性" class="headerlink" title="document常用属性"></a>document常用属性</h2><table>
<thead>
<tr>
<th>属性名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>alinkColor</td>
<td align="center">被点击时的颜色,对应<body>的alink</td>
</tr>
<tr>
<td>linkColor</td>
<td align="center">未被访问的连接颜色</td>
</tr>
<tr>
<td>vlinkColo</td>
<td align="center">已被访问的连接颜色</td>
</tr>
<tr>
<td>all[]</td>
<td align="center">存储HTML标记的一个数组</td>
</tr>
<tr>
<td>bgColor</td>
<td align="center">背景颜色</td>
</tr>
<tr>
<td>fgColor</td>
<td align="center">文档文本颜色</td>
</tr>
<tr>
<td>images[]</td>
<td align="center">存储图像对象的一个数组</td>
</tr>
<tr>
<td>links[]</td>
<td align="center">存储连接的一个数组</td>
</tr>
<tr>
<td>readyState</td>
<td align="center">获取某个对象的当前状态–XmlHttpRequest也有这个</td>
</tr>
<tr>
<td>URL</td>
<td align="center">获取URL</td>
</tr>
</tbody></table>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="form对象的常用属性"><a href="#form对象的常用属性" class="headerlink" title="form对象的常用属性"></a>form对象的常用属性</h3><table>
<thead>
<tr>
<th>属性名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>target</td>
<td align="center">返回或设置提交表单时目标窗口的打开方式</td>
</tr>
<tr>
<td>elements</td>
<td align="center">返回表单对象中的元素构成的数组，数组中的元素也是对象</td>
</tr>
<tr>
<td>length</td>
<td align="center">返回表单对象元素个数</td>
</tr>
<tr>
<td>encoding</td>
<td align="center">设置表单信息提交的编码方式</td>
</tr>
<tr>
<td>method</td>
<td align="center">表单提交方式</td>
</tr>
<tr>
<td>action</td>
<td align="center">设置表单提交的URL</td>
</tr>
</tbody></table>
<h3 id="文本框的方法"><a href="#文本框的方法" class="headerlink" title="文本框的方法"></a>文本框的方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>blur()</td>
<td align="center">将焦点离开文本框</td>
</tr>
<tr>
<td>focus()</td>
<td align="center">将焦点赋予文本框</td>
</tr>
<tr>
<td>click()</td>
<td align="center">模拟文本框被鼠标单击</td>
</tr>
<tr>
<td>select()</td>
<td align="center">选中文本框中的文字</td>
</tr>
<tr>
<td>disabled属性</td>
<td align="center">禁用文本框</td>
</tr>
</tbody></table>
<h2 id="图像对象"><a href="#图像对象" class="headerlink" title="图像对象"></a><em><strong><u>图像对象</u></strong></em></h2><pre class="line-numbers language-none"><code class="language-none">ps:document.images [name&#x2F;index] 可以直接访问image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="img对象的一些属性"><a href="#img对象的一些属性" class="headerlink" title="img对象的一些属性"></a>img对象的一些属性</h3><table>
<thead>
<tr>
<th>属性名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>border</td>
<td align="center">图片边框-破单位像素</td>
</tr>
<tr>
<td>height</td>
<td align="center">高度</td>
</tr>
<tr>
<td>hspace</td>
<td align="center">图像左边右边的文字和图片的间距</td>
</tr>
<tr>
<td>lowsrc</td>
<td align="center">设置替代图片的低分辨率图片URL</td>
</tr>
<tr>
<td>name</td>
<td align="center">名字</td>
</tr>
<tr>
<td>src</td>
<td align="center">url</td>
</tr>
<tr>
<td>vspace</td>
<td align="center">上下文字间距</td>
</tr>
<tr>
<td>alt</td>
<td align="center">鼠标经过图片时显示的文字</td>
</tr>
<tr>
<td>complete</td>
<td align="center">判断图片是否完全被加载</td>
</tr>
<tr>
<td>img.style.left</td>
<td align="center">img横坐标</td>
</tr>
<tr>
<td>img.style.top</td>
<td align="center">img纵坐标</td>
</tr>
</tbody></table>
<h3 id="图片置顶-无论如何移动滚动条，图片都可以看到"><a href="#图片置顶-无论如何移动滚动条，图片都可以看到" class="headerlink" title="图片置顶 | | 无论如何移动滚动条，图片都可以看到"></a>图片置顶 | | 无论如何移动滚动条，图片都可以看到</h3><p><em><strong><u>通过document.documentElement.scrollTop,scrollLeft获取当前页面中横纵滚动条所卷去部分的数值,然后将该值定位放入图层中的位置。</u></strong></em></p>
<h3 id="图片的滤镜名称以及参数说明"><a href="#图片的滤镜名称以及参数说明" class="headerlink" title="图片的滤镜名称以及参数说明"></a>图片的滤镜名称以及参数说明</h3>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本操作 -----BASE</title>
    <url>/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h1><p><u><em><strong>一个项目总文件夹就是一个仓库</strong></em></u></p>
<p><u><em><strong>我的习惯是Github或Gitee创建一个与本地项目总文件夹名字一致的仓库</strong></em></u></p>
<p><u><em><strong>我喜欢在github和gitee的用户名和个人邮箱都是同一个,看着舒服…</strong></em></u></p>
<p><u><em><strong>连通本地和远程存储库的一个重要操作是ssh连接,建立了这个连接以后后续很多操作都会变得便捷，包括github pages也需要它</strong></em></u></p>
<p><u><em><strong>再安装好了git后，设置git 用户名和密码以及联系邮箱</strong></em></u></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name xxxx   //这里我一般和github一致

<span class="token function">git</span> config --global user.email xxx@xxx.com 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="如何建立ssh链接"><a href="#如何建立ssh链接" class="headerlink" title="如何建立ssh链接?"></a>如何建立ssh链接?</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 首先生成ssh公钥</span>
ssh-keygen -t rsa -C <span class="token string">"邮箱地址"</span>   //此处的引号不可省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><u><em><strong>一直点回车</strong></em></u><br><u><em><strong>点到不能点为止</strong></em></u><br><u><em><strong>公钥自动生成在如下位置</u></strong></em></p>
<p><img src="https://r-ovo-stack.github.io/PhotoStack-2/gitres/r%20(5).png"></p>
<p><u><em><strong>id_rsa.pub里面的内容便是公钥</strong></em></u><br><u><em><strong>进入github或gitee找到ssh输入公钥进行绑定即可</u></strong></em></p>
<p><img src="https://r-ovo-stack.github.io/PhotoStack-2/gitres/r%20(3).png"></p>
<h2 id="基本项目操作"><a href="#基本项目操作" class="headerlink" title="基本项目操作"></a>基本项目操作</h2><p><em><strong><u>首先需要在项目文件夹目录下打开bash (我的项目文件夹是PhotoStack)</u></strong></em></p>
<hr>
<p><img src="https://r-ovo-stack.github.io/PhotoStack-2/gitres/r%20(2).png"></p>
<h3 id="初始化存储库"><a href="#初始化存储库" class="headerlink" title="初始化存储库"></a>初始化存储库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init  //初始化一个.git隐藏文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="显示当前项目目录和暂存区的状态"><a href="#显示当前项目目录和暂存区的状态" class="headerlink" title="显示当前项目目录和暂存区的状态"></a>显示当前项目目录和暂存区的状态</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="暂存当前工作区所有更改"><a href="#暂存当前工作区所有更改" class="headerlink" title="暂存当前工作区所有更改"></a>暂存当前工作区所有更改</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>    //相当于git <span class="token function">add</span> -A<span class="token punctuation">(</span>git <span class="token function">add</span> --all<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="将暂存区的代码提交到本地仓库"><a href="#将暂存区的代码提交到本地仓库" class="headerlink" title="将暂存区的代码提交到本地仓库"></a>将暂存区的代码提交到本地仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'注释消息'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="链接远程仓库"><a href="#链接远程仓库" class="headerlink" title="链接远程仓库"></a>链接远程仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin 远程仓库地址   //链接远程仓库，往远程仓库add
eg: <span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/r-ovo-stack/photo-stack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="同步本地与远程仓库–sync"><a href="#同步本地与远程仓库–sync" class="headerlink" title="同步本地与远程仓库–sync"></a>同步本地与远程仓库–sync</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push -u origin master
强制推送--当github对应仓库为空时可进行
<span class="token function">git</span> push -u -f origin master  //将master分支安排上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="查看本地git信息"><a href="#查看本地git信息" class="headerlink" title="查看本地git信息"></a>查看本地git信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="利用Github创建免费图床"><a href="#利用Github创建免费图床" class="headerlink" title="利用Github创建免费图床"></a>利用Github创建免费图床</h1><h2 id="远程建库"><a href="#远程建库" class="headerlink" title="远程建库"></a>远程建库</h2><p><em><strong>直接New一个仓库即可,其他啥文件以后再说</strong></em></p>
<h2 id="本地创建图床文件夹-最好同名"><a href="#本地创建图床文件夹-最好同名" class="headerlink" title="本地创建图床文件夹(最好同名)"></a>本地创建图床文件夹(最好同名)</h2><p>此处我的图床文件夹为: PhotoStack-2</p>
<h2 id="利用上面的基本命令就可以将该目录下所有文件-picture-code-file-push上去"><a href="#利用上面的基本命令就可以将该目录下所有文件-picture-code-file-push上去" class="headerlink" title="利用上面的基本命令就可以将该目录下所有文件(picture/code file)push上去"></a>利用上面的基本命令就可以将该目录下所有文件(picture/code file)push上去</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="暂存更改"><a href="#暂存更改" class="headerlink" title="暂存更改"></a>暂存更改</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> add.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="本地提交"><a href="#本地提交" class="headerlink" title="本地提交"></a>本地提交</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'commit-forst'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https:/github.com/UserName/ReposityName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="SYNC-push"><a href="#SYNC-push" class="headerlink" title="SYNC-push"></a>SYNC-push</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><img src="https://r-ovo-stack.github.io/PhotoStack-2/gitres/r%20(4).png"></p>
<h3 id="远程查看"><a href="#远程查看" class="headerlink" title="远程查看"></a>远程查看</h3><p><img src="https://r-ovo-stack.github.io/PhotoStack-2/gitres/r%20(7).png"></p>
<h3 id="开启page服务–github里面的pages是会自动更新的-这一点gitee需要自己手动更新部署page"><a href="#开启page服务–github里面的pages是会自动更新的-这一点gitee需要自己手动更新部署page" class="headerlink" title="开启page服务–github里面的pages是会自动更新的 || 这一点gitee需要自己手动更新部署page"></a>开启page服务–github里面的pages是会自动更新的 || 这一点gitee需要自己手动更新部署page</h3><p><em><strong>在仓库settings中找到github pages Ji</strong></em><br><em><strong>发现此时没有开启pages服务，点击source的分支，选择一个分支(一般是Master)</strong></em><br><em><strong>save</strong></em></p>
<p><img src="https://r-ovo-stack.github.io/PhotoStack-2/gitres/r%20(6).png"></p>
<h3 id="如果有兴趣的话可以建一个Index-html文件在仓库主界面-这样打开仓库的Page地址就会显示该index-html主页"><a href="#如果有兴趣的话可以建一个Index-html文件在仓库主界面-这样打开仓库的Page地址就会显示该index-html主页" class="headerlink" title="如果有兴趣的话可以建一个Index.html文件在仓库主界面,这样打开仓库的Page地址就会显示该index.html主页"></a>如果有兴趣的话可以建一个Index.html文件在仓库主界面,这样打开仓库的Page地址就会显示该index.html主页</h3><h3 id="图床测试-gt-打开进入地址"><a href="#图床测试-gt-打开进入地址" class="headerlink" title="图床测试-&gt;打开进入地址"></a>图床测试-&gt;打开进入地址</h3><p><a href="https://r-ovo-stack.github.io/PhotoStack-2/colorback/beaut.jpg">https://r-ovo-stack.github.io/PhotoStack-2/colorback/beaut.jpg</a></p>
<p><img src="https://r-ovo-stack.github.io/PhotoStack-2/gitres/r%20(1).png"></p>
<h1 id="常见问题如何解决–持更"><a href="#常见问题如何解决–持更" class="headerlink" title="常见问题如何解决–持更"></a>常见问题如何解决–持更</h1>]]></content>
      <categories>
        <category>程序员基本功</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB-初学       -----BASE</title>
    <url>/MongoDB/</url>
    <content><![CDATA[<p>s</p>
<h2 id="MongoDB–简介"><a href="#MongoDB–简介" class="headerlink" title="MongoDB–简介"></a>MongoDB–简介</h2><blockquote>
<p>MongoDB是使用js管理数据的数据库,使用V8 js引擎</p>
</blockquote>
<h2 id="什么是非关系型数据库"><a href="#什么是非关系型数据库" class="headerlink" title="什么是非关系型数据库"></a>什么是非关系型数据库</h2><blockquote>
<p>非关系型数据库指非关系型的，分布式的，且一般不保证遵循ACID原则的数据存储系统,以键值对存储,结构不固定,每一个元组可以有不一样的字段,每个元组可以根据需要增加一些自己的键值对，不局限与固定结构,可以减少一些时间和空间上的开销</p>
</blockquote>
<h2 id="Advantage"><a href="#Advantage" class="headerlink" title="Advantage"></a>Advantage</h2><blockquote>
<p>可以根据需要添加必须字段,为了获取用户不同信息,仅需要根据id即可去除相应value,不必多表关联查询</p>
</blockquote>
<blockquote>
<p>使用与社交网络服务…</p>
</blockquote>
<blockquote>
<p>严格意义上讲,非关系型不是一种数据库，更像是一种数据结构化存储方法的集合</p>
</blockquote>
<blockquote>
<p>只适合存储较为简单的数据,不适合持久存储海量数据</p>
</blockquote>
<h2 id="MongoDB基本语句"><a href="#MongoDB基本语句" class="headerlink" title="MongoDB基本语句"></a>MongoDB基本语句</h2><h3 id="创建-使用数据库—use"><a href="#创建-使用数据库—use" class="headerlink" title="创建 | 使用数据库—use"></a>创建 | 使用数据库—use</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> DbName  <span class="token comment">//创建eb对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="创建集合-表—createCollection"><a href="#创建集合-表—createCollection" class="headerlink" title="创建集合 | 表—createCollection()"></a>创建集合 | 表—createCollection()</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>createCollection<span class="token punctuation">(</span><span class="token string">"TableName"</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="集合中添加数据—save"><a href="#集合中添加数据—save" class="headerlink" title="集合中添加数据—save()"></a>集合中添加数据—save()</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>TableName<span class="token punctuation">.</span><span class="token keyword">save</span><span class="token punctuation">(</span>&#123;name1:<span class="token string">''</span><span class="token punctuation">,</span>name2:<span class="token string">''</span>&#125;<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="集合的查询–find"><a href="#集合的查询–find" class="headerlink" title="集合的查询–find()"></a>集合的查询–find()</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>TableName<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//查询表所有数据</span>
db<span class="token punctuation">.</span>TableName<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;&#125;<span class="token punctuation">,</span>&#123;_id:<span class="token boolean">false</span>&#125;<span class="token punctuation">)</span>  <span class="token comment">//不显示id字段</span>
db<span class="token punctuation">.</span>TableName<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;price:<span class="token number">400</span>&#125;<span class="token punctuation">,</span>&#123;_id:<span class="token boolean">false</span>&#125;<span class="token punctuation">)</span> <span class="token comment">// 查询price字段为400的结果集</span>
db<span class="token punctuation">.</span>TableName<span class="token punctuation">.</span>findOne<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 仅显示查询结果的第一条记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="集合数据的修改-删除-—remove"><a href="#集合数据的修改-删除-—remove" class="headerlink" title="集合数据的修改 | 删除  —remove()"></a>集合数据的修改 | 删除  —remove()</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//将name属性值为knife的数据行的price属性修改为700</span>
var <span class="token keyword">temp</span><span class="token operator">=</span>db<span class="token punctuation">.</span>TableName<span class="token punctuation">.</span>findONe<span class="token punctuation">(</span>&#123;name:<span class="token string">'knife'</span>&#125;<span class="token punctuation">)</span>  <span class="token comment">//先把查询结果引用给temp</span>
<span class="token keyword">temp</span><span class="token punctuation">.</span>price<span class="token operator">=</span><span class="token number">700</span> <span class="token comment">//修改</span>
db<span class="token punctuation">.</span>TableName<span class="token punctuation">.</span><span class="token keyword">save</span><span class="token punctuation">(</span><span class="token keyword">temp</span><span class="token punctuation">)</span> <span class="token comment">//存回去</span>


<span class="token comment">//删除</span>
<span class="token comment">#删除name=pro的数据</span>
db<span class="token punctuation">.</span>TableName<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>&#123;name:<span class="token string">'pro'</span>&#125;<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql常识记录       -----BASE</title>
    <url>/Mysql/</url>
    <content><![CDATA[<h2 id="Mysql–简介"><a href="#Mysql–简介" class="headerlink" title="Mysql–简介"></a>Mysql–简介</h2><blockquote>
</blockquote>
<h2 id="什么是关系型数据库"><a href="#什么是关系型数据库" class="headerlink" title="什么是关系型数据库"></a>什么是关系型数据库</h2><blockquote>
</blockquote>
<h2 id="Advantage"><a href="#Advantage" class="headerlink" title="Advantage"></a>Advantage</h2><blockquote>
</blockquote>
<h2 id="Mysql基本语句"><a href="#Mysql基本语句" class="headerlink" title="Mysql基本语句"></a>Mysql基本语句</h2><h3 id="创建-使用数据库—use"><a href="#创建-使用数据库—use" class="headerlink" title="创建 | 使用数据库—use"></a>创建 | 使用数据库—use</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> DbName  <span class="token comment">//创建eb对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="创建表-—"><a href="#创建表-—" class="headerlink" title="创建表 —"></a>创建表 —</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="表中添加数据—"><a href="#表中添加数据—" class="headerlink" title="表中添加数据—"></a>表中添加数据—</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="表的查询—"><a href="#表的查询—" class="headerlink" title="表的查询—"></a>表的查询—</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="表数据的修改-—"><a href="#表数据的修改-—" class="headerlink" title="表数据的修改  —"></a>表数据的修改  —</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="表数据的删除-—"><a href="#表数据的删除-—" class="headerlink" title="表数据的删除  —"></a>表数据的删除  —</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js V14.0 学习水滴记录-BASE</title>
    <url>/Nodejs%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93--1/</url>
    <content><![CDATA[<hr>
<p>本博文以及之后的Node.js-Tags记录了从2021年1月12号到1月17号的node技术总结，虽然只是会了点皮毛，但是个人认为，学习一样新的东西，应该养成良好的笔记习惯，昨天花了几个小时搭建的博客，今天就给他派上用场哈哈</p>
<hr>
<h1 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js??"></a>什么是Node.js??</h1><p>学了这么多天，我理解的Nodejs就是一个Js运行框架，它拥有让javascript运行在Web服务器中的能力，就和大三上学期学的Php的思想类似</p>
<h2 id="V8-引擎"><a href="#V8-引擎" class="headerlink" title="V8 引擎"></a>V8 引擎</h2><hr>
<p>V8是一个Js引擎，由C++开发而来，使用了内联缓存以提高性能。</p>
<h2 id="学习Node-js需要掌握哪些知识"><a href="#学习Node-js需要掌握哪些知识" class="headerlink" title="学习Node.js需要掌握哪些知识?"></a>学习Node.js需要掌握哪些知识?</h2><hr>
<p>我认为在学习这个之前应该至少要会javascript语言，并且html,css要有一定的了解，不然很容易不懂得前后端的配合运作机制，学到后面的http模块以后可能会摸不清楚头脑</p>
<h1 id="Node-js-–Base"><a href="#Node-js-–Base" class="headerlink" title="Node.js –Base"></a>Node.js –Base</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><hr>
<h3 id="filename-注意是两个"><a href="#filename-注意是两个" class="headerlink" title="__filename  (注意是两个)"></a>__<em>filename  (注意是两个</em>)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'该命令输出当前文件名'</span><span class="token punctuation">,</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Node.js和Js一样，尾巴可以不写";"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h3 id="dirname"><a href="#dirname" class="headerlink" title="__dirname"></a>__dirname</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'该命令输出当前文件夹'</span><span class="token punctuation">,</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><hr>
<h3 id="console对象"><a href="#console对象" class="headerlink" title="console对象"></a>console对象</h3><h4 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h4><table>
<thead>
<tr>
<th>方法名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>log()</td>
<td align="center">打印—标准输出流</td>
</tr>
<tr>
<td>time()</td>
<td align="center">输出时间，表示计时开始</td>
</tr>
<tr>
<td>timeEnd()</td>
<td align="center">结束时间，表示计时结束</td>
</tr>
</tbody></table>
<h4 id="console-log-中的转义符号"><a href="#console-log-中的转义符号" class="headerlink" title="console.log()中的转义符号"></a>console.log()中的转义符号</h4><hr>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">%</span>d   输出数字变量
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%d+%d=%d'</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">300</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">%</span>s   输出字符串变量
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'字符串string %s'</span><span class="token punctuation">,</span><span class="token string">'Rulvbobin'</span><span class="token punctuation">,</span><span class="token string">'Node.js'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">%</span>j   输出Json变量
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'JSON %j'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'node.js'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="process对象-只存在于Node-js中，javascript中没有这个对象"><a href="#process对象-只存在于Node-js中，javascript中没有这个对象" class="headerlink" title="process对象(只存在于Node.js中，javascript中没有这个对象)"></a>process对象(只存在于Node.js中，javascript中没有这个对象)</h3><p>该对象用于描述当前程序的状态,process对象最重要的它的方法,相当于java里面的多线程的概念,但js本身又是单线程的</p>
<hr>
<table>
<thead>
<tr>
<th>属性名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>argv</td>
<td align="center">return 一个数组，由命令行执行脚本时的各参数组成</td>
</tr>
<tr>
<td>env</td>
<td align="center">return 当前系统环境变量</td>
</tr>
<tr>
<td>version</td>
<td align="center">return node.js版本</td>
</tr>
<tr>
<td>versions</td>
<td align="center">return 当前node.js的版本号以及依赖包dependency</td>
</tr>
<tr>
<td>arch</td>
<td align="center">return 当前CPU架构</td>
</tr>
<tr>
<td>platform</td>
<td align="center">return  当前程序所在平台系统</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//输出内容,程序结束之前所有的状态</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">': '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token string">'--exit'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//获得下一个数组中的参数</span>
        <span class="token keyword">var</span> exitTime <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//setTImeout(),指定时长以后结束程序</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> exitTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程序执行结果:</p>
<p><img src="https://r-ovo-stack.gitee.io/res/res1.png"></p>
<h2 id="全局函数–在任何位置都可以调用"><a href="#全局函数–在任何位置都可以调用" class="headerlink" title="全局函数–在任何位置都可以调用"></a>全局函数–在任何位置都可以调用</h2><p>函数和方法还是有一定的区别的哦</p>
<hr>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">
全局函数<span class="token punctuation">.</span>js

<span class="token function">setTimeout</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>   在指定ms后执行指定函数cb<span class="token punctuation">,</span>只执行一次
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">停止一个之前调用setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>创建的定时器
<span class="token function">setInterval</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">与setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>近乎一致，但其是周期循环执行
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Node-js里面的模块化编程-module-exports"><a href="#Node-js里面的模块化编程-module-exports" class="headerlink" title="Node.js里面的模块化编程 module/exports"></a>Node.js里面的模块化编程 module/exports</h1><p>Node.js中的每个模块都是一个.js文件,module.js文件是创建的模块f,在执行.js中调用module.js模块内容的代码</p>
<h2 id="exports对象创建模块的方法"><a href="#exports对象创建模块的方法" class="headerlink" title="exports对象创建模块的方法"></a>exports对象创建模块的方法</h2><hr>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>js
<span class="token comment">//定义一个求和方法add  || 匿名函数</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">add</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//定义计算圆周的方法</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">circleArea</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">R</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token constant">R</span><span class="token operator">*</span><span class="token constant">R</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js">main<span class="token punctuation">.</span>js
<span class="token comment">//加载module.js文件，用require(path)方法，通常使用相对路径</span>
<span class="token keyword">var</span> module<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./module.js'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span><span class="token function">circleArea</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="module对象创建模块的方法"><a href="#module对象创建模块的方法" class="headerlink" title="module对象创建模块的方法"></a>module对象创建模块的方法</h2><hr>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>js
<span class="token keyword">function</span> <span class="token keyword">class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tName</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        name<span class="token operator">=</span>tName<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js">main<span class="token punctuation">.</span>js
<span class="token keyword">var</span> temp<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./module.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hi<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hi<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="常见内置模块"><a href="#常见内置模块" class="headerlink" title="常见内置模块"></a>常见内置模块</h2><hr>
<h3 id="os模块-const-os-require-‘os’"><a href="#os模块-const-os-require-‘os’" class="headerlink" title="os模块      const os=require(‘os’);"></a>os模块      const os=require(‘os’);</h3><hr>
<table>
<thead>
<tr>
<th>方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>hostname</td>
<td align="center">return 主机名</td>
</tr>
<tr>
<td>type()</td>
<td align="center">return 操作系统名</td>
</tr>
<tr>
<td>platform()</td>
<td align="center"></td>
</tr>
<tr>
<td>arch()</td>
<td align="center"></td>
</tr>
<tr>
<td>release()</td>
<td align="center">return 系统发行版本</td>
</tr>
<tr>
<td>uptime()</td>
<td align="center">return 操作系统运行时间，单位/s</td>
</tr>
<tr>
<td>loadavg()</td>
<td align="center">return 一个包含1min,5min,15min平均负载的数组</td>
</tr>
<tr>
<td>totalmem()</td>
<td align="center">return 系统内存总量，单位/字节</td>
</tr>
<tr>
<td>freemem()</td>
<td align="center">return 系统空闲内存总量，单位/字节</td>
</tr>
<tr>
<td>cpus()</td>
<td align="center">return 一个对象数组，包含所安装的每个CPU内核的信息</td>
</tr>
<tr>
<td>networkInterfaces()</td>
<td align="center">获得网路借口列表</td>
</tr>
</tbody></table>
<h3 id="url-模块-const-url-require-‘url’"><a href="#url-模块-const-url-require-‘url’" class="headerlink" title="url 模块    const url=require(‘url’);"></a>url 模块    const url=require(‘url’);</h3><hr>
<table>
<thead>
<tr>
<th>方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>parse()</td>
<td align="center">将url字符串转为url对象</td>
</tr>
<tr>
<td>format(urlObj)</td>
<td align="center">将url对象转为url字符串</td>
</tr>
<tr>
<td>resolve(from,to)</td>
<td align="center">组合变数,构造url字符串</td>
</tr>
</tbody></table>
<h3 id="Query-String-模块-const-Query-require-‘-querystring’"><a href="#Query-String-模块-const-Query-require-‘-querystring’" class="headerlink" title="Query String 模块       const Query=require(‘ querystring’);"></a>Query String 模块       const Query=require(‘ querystring’);</h3><hr>
<table>
<thead>
<tr>
<th>方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>stringify(queryObj)</td>
<td align="center">将query对象，转换为query字符串</td>
</tr>
<tr>
<td>parse(quetyString)</td>
<td align="center">将quety字符串转为query对象</td>
</tr>
</tbody></table>
<h3 id="util-模块-const-util-require-‘util’"><a href="#util-模块-const-util-require-‘util’" class="headerlink" title="util 模块    const util=require(‘util’);"></a>util 模块    const util=require(‘util’);</h3><hr>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//util.format()其实就是printf("",  );</span>

<span class="token keyword">const</span> util<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//var util也可以</span>
<span class="token keyword">var</span> data<span class="token operator">=</span>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'%d+%d=%d'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="crypto-模块-哈希模块-const-crypto-require-‘crypto’"><a href="#crypto-模块-哈希模块-const-crypto-require-‘crypto’" class="headerlink" title="crypto 模块(哈希模块)     const crypto=require(‘crypto’);"></a>crypto 模块(哈希模块)     const crypto=require(‘crypto’);</h3><hr>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> cry<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span>
<span class="token comment">//生成hash</span>
<span class="token keyword">var</span> temp<span class="token operator">=</span>cry<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">)</span>
temp<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> output<span class="token operator">=</span>temp<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//output</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">,</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出哈希(密码)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>前/后端</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Servelt       -----BASE</title>
    <url>/Servelt/</url>
    <content><![CDATA[<h2 id="什么是Servelt"><a href="#什么是Servelt" class="headerlink" title="什么是Servelt?"></a>什么是Servelt?</h2><blockquote>
<p>Servelt是一个服务端的组件,用来处理response和request的java程序。</p>
</blockquote>
<h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><blockquote>
<p>协议：多方相互约定需要遵守的规则<br>http协议: 客户端和服务器之间通信时发送的数据需要遵守的协议<br>http协议中的数据也叫报文<br>客户端叫请求，服务器叫响应</p>
</blockquote>
<h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><blockquote>
<p>请求方式<br>请求资源路径<br>协议版本号</p>
</blockquote>
<h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><blockquote>
<p>Accept:告诉服务器客户端能够接受的类型<br>User-Agent:浏览器的信息<br>Accept-Encoding:接收的编码<br>Host:表示请求的服务器ip和Port<br>Accept-Language:接受语言类型<br>Connection:告诉服务器链接如何如何处理<br>closet:马上关闭</p>
</blockquote>
<h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><h4 id="请求行-1"><a href="#请求行-1" class="headerlink" title="请求行"></a>请求行</h4><blockquote>
<p>请求方式:post<br>请求资源路径  /工程路径/文件<br>请求协议版本号</p>
</blockquote>
<h4 id="请求头-1"><a href="#请求头-1" class="headerlink" title="请求头"></a>请求头</h4><blockquote>
<p>空行</p>
</blockquote>
<h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><blockquote>
<p>发送给服务器的数据:action=xxxxx,username=xxxxxx,pwd=xxxxx<br>即表单信息<br>Referer:表示浏览器的地址(请求的发起者)<br>Content-Type:发送数据的类型(1.application/x-www-form-urlencoded:格式为…之后对其进行url编码)(2.multipart/form-data:白哦是多段形式提交数据)<br>Content-Length:发送的数据长度<br>Cache-Control:表示如何控制缓存</p>
</blockquote>
<h2 id="有哪些GET请求"><a href="#有哪些GET请求" class="headerlink" title="有哪些GET请求"></a>有哪些GET请求</h2><blockquote>
<p>form标签method=GET<br><a>标签<br>link标签引入CSS<br>scriopt引入js<br>img引入图片<br>iframe引入html<br>浏览器中输入地址回车</p>
</blockquote>
<h2 id="响应的HTTP协议格式"><a href="#响应的HTTP协议格式" class="headerlink" title="响应的HTTP协议格式"></a>响应的HTTP协议格式</h2><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><blockquote>
<p>1.协议版本号<br>2.响应状态码<br>3.响应状态描述符</p>
</blockquote>
<h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><blockquote>
<p>key:value   不同的响应头有区别的<br>Date:请求响应的时间(格林时间)<br>空行</p>
</blockquote>
<h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><blockquote>
<p>Cache缓存<br>服务器回传给客户端的数据:比如页面的html文件</p>
</blockquote>
<h2 id="MIME类型说明"><a href="#MIME类型说明" class="headerlink" title="MIME类型说明"></a>MIME类型说明</h2><blockquote>
<p>没啥用</p>
</blockquote>
<h2 id="HttpServletRequest类"><a href="#HttpServletRequest类" class="headerlink" title="HttpServletRequest类"></a>HttpServletRequest类</h2><h3 id="有啥用"><a href="#有啥用" class="headerlink" title="有啥用"></a>有啥用</h3><blockquote>
<p>Tomcat服务器会把请求过来的http协议信息解析好封装到Req对象中,传递到Service方法(doGet和doPost中)给我们使用，通过HttpServletRequest对象获取所有请求信息</p>
</blockquote>
<h2 id="请求转发-转发请求–几个Severlt之间转发请求"><a href="#请求转发-转发请求–几个Severlt之间转发请求" class="headerlink" title="请求转发(转发请求–几个Severlt之间转发请求)"></a>请求转发(转发请求–几个Severlt之间转发请求)</h2><blockquote>
<p>服务器收到请求之后，从一次资源跳转到另一个资源的操作叫请求转发</p>
</blockquote>
<h2 id="web中的-不同意义"><a href="#web中的-不同意义" class="headerlink" title="web中的/不同意义"></a>web中的/不同意义</h2><h2 id="Servlet往客户端回传字符串"><a href="#Servlet往客户端回传字符串" class="headerlink" title="Servlet往客户端回传字符串"></a>Servlet往客户端回传字符串</h2><h2 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h2><blockquote>
<p>指的是客户端给服务器发送请求时，然后服务器告诉客户端访问新的地址(之前的地址被废弃的情况需要)</p>
</blockquote>
<h2 id="jsp其实就是servelt"><a href="#jsp其实就是servelt" class="headerlink" title="jsp其实就是servelt"></a>jsp其实就是servelt</h2>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>servelt</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 5</title>
    <url>/Spring5/</url>
    <content><![CDATA[<h1 id="Spring5"><a href="#Spring5" class="headerlink" title="Spring5"></a>Spring5</h1><h2 id="IDEA配置maven版本"><a href="#IDEA配置maven版本" class="headerlink" title="IDEA配置maven版本"></a>IDEA配置maven版本<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210508222339349.png" alt="image-20210508222339349" style="zoom:67%;" /></h2><h3 id="IDEA报错The-directory-xxx-is-registered-as-a-Git-root-but-no-Git-repositories-were-found-there的解决办法"><a href="#IDEA报错The-directory-xxx-is-registered-as-a-Git-root-but-no-Git-repositories-were-found-there的解决办法" class="headerlink" title="IDEA报错The directory xxx is registered as a Git root,but no Git repositories were found there的解决办法"></a>IDEA报错The directory xxx is registered as a Git root,but no Git repositories were found there的解决办法</h3><p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210508222535552.png" alt="image-20210508222535552"></p>
<blockquote>
<p>解决办法 : 删除掉该版本即可</p>
</blockquote>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>由于软件开发的复杂性而创建，spring使用的是基本的javaBean来完成以前只可能由EJB完成的事情<br>，然而，spring的用途不仅仅限于服务器端的开发，从简单性，可测试性和松耦合性角度而言，绝大部分<br>Java应用都可以从Spring受益</p>
<h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><p>任何Java应用</p>
<p>官方文档地址：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core</a></p>
<h2 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h2><p>使现有的技术更加容易使用，本身是一个鱼龙混杂的大锅,整合了现有的技术框架包概括Mybatis,<br>spring mvc</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1.一个开源的免费框架—容器<br>2.是一个轻量级的,非入侵框架,引入spring不会影响原先的代码<br>3.控制反转IOC，面向切面编程AOP<br>4.支持事务处理，对框架整合的支持</p>
<p>总结：</p>
<p>弊端：配置十分繁琐</p>
<p>IOC:控制依赖对象的方式反转，把选择权交给用户</p>
<p><strong>基于 XML 的配置元数据的基本结构</strong></p>
<pre class="line-numbers language-<?xml" data-language="<?xml"><div class="caption"><span>version</span></div><code class="language-<?xml">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;
    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;
    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans
        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;  
    &lt;!-- collaborators and configuration for this bean go here --&gt;
&lt;/bean&gt;

&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;
    &lt;!-- collaborators and configuration for this bean go here --&gt;
&lt;/bean&gt;

&lt;!-- more bean definitions go here --&gt;
</code></pre>
<p></beans>```</p>
<p>id属性是识别单个bean定义的字符串。<br>class属性定义bean类的类型，并使用完全合格的类名。# Spring5</p>
<h3 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h3><p>由于软件开发的复杂性而创建，spring使用的是基本的javaBean来完成以前只可能由EJB完成的事情<br>，然而，spring的用途不仅仅限于服务器端的开发，从简单性，可测试性和松耦合性角度而言，绝大部分<br>Java应用都可以从Spring受益</p>
<h2 id="范围-1"><a href="#范围-1" class="headerlink" title="范围"></a>范围</h2><p>任何Java应用</p>
<p>官方文档地址：</p>
<h2 id="理念-1"><a href="#理念-1" class="headerlink" title="理念"></a>理念</h2><p>使现有的技术更加容易使用，本身是一个鱼龙混杂的大锅,整合了现有的技术框架包概括Mybatis,<br>spring mvc</p>
<h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><p>1.一个开源的免费框架—容器<br>2.是一个轻量级的,非入侵框架,引入spring不会影响原先的代码<br>3.控制反转IOC，面向切面编程AOP<br>4.支持事务处理，对框架整合的支持</p>
<p>总结：</p>
<p>弊端：配置十分繁琐</p>
<p>IOC:控制依赖对象的方式反转，把选择权交给用户</p>
<p><strong>基于 XML 的配置元数据的基本结构</strong></p>
<pre class="line-numbers language-<?xml" data-language="<?xml"><div class="caption"><span>version</span></div><code class="language-<?xml">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;
    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;
    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans
        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;  
    &lt;!-- collaborators and configuration for this bean go here --&gt;
&lt;/bean&gt;

&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;
    &lt;!-- collaborators and configuration for this bean go here --&gt;
&lt;/bean&gt;

&lt;!-- more bean definitions go here --&gt;
</code></pre>
<p></beans>```</p>
<p>id属性是识别单个bean定义的字符串。<br>class属性定义bean类的类型，并使用完全合格的类名。</p>
<h2 id="Spring-工作原理的高层视图"><a href="#Spring-工作原理的高层视图" class="headerlink" title="Spring 工作原理的高层视图"></a>Spring 工作原理的高层视图<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326193306931.png" alt="image-20210326193306931"></h2><h2 id="需要的maven配置"><a href="#需要的maven配置" class="headerlink" title="需要的maven配置"></a>需要的maven配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="xml配置方式进行bean的装配"><a href="#xml配置方式进行bean的装配" class="headerlink" title="xml配置方式进行bean的装配"></a>xml配置方式进行bean的装配</h2><h3 id="JavaBean类"><a href="#JavaBean类" class="headerlink" title="JavaBean类"></a>JavaBean类</h3><p>com.bin.pojo</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bin<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> hello <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> str<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"hello&#123;"</span> <span class="token operator">+</span>
                <span class="token string">"str='"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="spring-配置文件"><a href="#spring-配置文件" class="headerlink" title="spring 配置文件"></a>spring 配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>


    <span class="token comment">&lt;!--使用spring创建对象--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.pojo.hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Spring<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bin<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>hello</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//获取spring  上下文对象</span>
        <span class="token class-name">ApplicationContext</span> context<span class="token punctuation">;</span>
        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"mm.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hello hello <span class="token operator">=</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>bin<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>hello<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h1><h2 id="xml实现自动装配"><a href="#xml实现自动装配" class="headerlink" title="xml实现自动装配"></a>xml实现自动装配</h2><p>非自动装配是怎么实现的</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.dao.daught<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>daught<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xiaoli<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.dao.son<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xiaobin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.dao.Father<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>daught<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TOMCAT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><u>自动装配如下</u></p>
<p><u><em><strong>byType:</strong></em></u></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.dao.daught<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>daught<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xiaoli<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.dao.son<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xiaobin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.dao.Father<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TOMCAT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><em><strong>byName:</strong></em></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.dao.daught<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xiaoli<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.dao.son<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xiaobin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.dao.Father<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TOMCAT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>可以看到,byType方式的特点为:一个类只能有一个bean实例,否则会出错,但是id可以任意取<br>byName方式的特点为: 取决于id,并且能否装配取决于JavaBean中的set方法参数<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326202114156.png" alt="image-20210326202114156"></p>
</blockquote>
<h2 id="spring注解实现自动装配-Using-Annotation-Autowire-通过byType"><a href="#spring注解实现自动装配-Using-Annotation-Autowire-通过byType" class="headerlink" title="spring注解实现自动装配-Using Annotation Autowire(通过byType)"></a>spring注解实现自动装配-Using Annotation Autowire(通过byType)</h2><blockquote>
<p>需要的约束</p>
</blockquote>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    
	<span class="token comment">&lt;!--开启注解支持--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>使用注意:当<bean>中出现多个同类型,会出现如下</p>
</blockquote>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326203440699.png" alt="image-20210326203440699"></p>
<blockquote>
<p>Source</p>
</blockquote>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326203554168.png" alt="image-20210326203554168"></p>
<p><em><strong><u>如何解决: 增加限定符@Qualifier</u></strong></em></p>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326204359369.png" alt="image-20210326204359369"></p>
<p>Tip:@Autowire(required = false)中的required属性为false 表示该对象可以为null,否则不可以为空 || 该效果与@Nullable一致</p>
<h2 id="resource注解实现自动装配-该注解属于java不属于spring"><a href="#resource注解实现自动装配-该注解属于java不属于spring" class="headerlink" title="@resource注解实现自动装配 (该注解属于java不属于spring)"></a>@resource注解实现自动装配 (该注解属于java不属于spring)</h2><blockquote>
<p>@resource先通过Name(id)寻找,找不到再使用类型(type)去找，更加智能</p>
</blockquote>
<p><u>当同一个class只注册了一个bean时直接添加该注解即可</u></p>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326205419014.png" alt="image-20210326205419014"></p>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326205445497.png" alt="image-20210326205445497"></p>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326205432069.png" alt="image-20210326205432069"></p>
<p><u>/</u></p>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326205848671.png" alt="image-20210326205848671"><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326205908439.png" alt="image-20210326205908439"></p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC</title>
    <url>/SpringMVC/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210325083919380.png" alt="image-20210325083919380">Web层围绕</p>
<h2 id="启动Tomcat以后碰到的问题"><a href="#启动Tomcat以后碰到的问题" class="headerlink" title="启动Tomcat以后碰到的问题"></a>启动Tomcat以后碰到的问题</h2><h4 id="1-控制台输出乱码"><a href="#1-控制台输出乱码" class="headerlink" title="1.控制台输出乱码:"></a>1.控制台输出乱码:</h4><ul>
<li>通过修改tomcat的conf下的logging.properties配置文件将ConsoleHandler.encoding=UTF-8改成GBK即可</li>
</ul>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210325094614507.png" alt="image-20210325094614507"></p>
<h4 id="2-出现-–运行-‘Tomcat-9-0-41’-出错-port-out-of-range-1"><a href="#2-出现-–运行-‘Tomcat-9-0-41’-出错-port-out-of-range-1" class="headerlink" title="2.出现 –运行 ‘Tomcat 9.0.41’ 出错: port out of range:-1"></a>2.出现 –运行 ‘Tomcat 9.0.41’ 出错: port out of range:-1</h4><ul>
<li>修改tomcat的conf下的serve.xml(如图所示),将改Port改为&gt;1024的任意数值皆可。1024以内的端口主要被计算机本身占用</li>
</ul>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210325094538788.png" alt="image-20210325094538788"></p>
<h4 id="3-启动Tomcat总是出现404页面"><a href="#3-启动Tomcat总是出现404页面" class="headerlink" title="3.启动Tomcat总是出现404页面"></a>3.启动Tomcat总是出现404页面</h4><p>首先看Tomcat的配置：</p>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210325094814817.png" alt="image-20210325094814817"></p>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210325095406053.png" alt="image-20210325095406053"></p>
<p><u>我是如何处理的：将Application context（项目发布名）清空，则启动服务会自动跳到localhost:8080,也就是打开index.jsp页面。之后的页面跟随你的WEB-INF文件夹的路径树进行串接即可</u></p>
<h4 id="4-所有的文件都已经写好了，并且maven也导入成功，spring配置也没问题，启动主页以后总是显示404的解决办法之一"><a href="#4-所有的文件都已经写好了，并且maven也导入成功，spring配置也没问题，启动主页以后总是显示404的解决办法之一" class="headerlink" title="4.所有的文件都已经写好了，并且maven也导入成功，spring配置也没问题，启动主页以后总是显示404的解决办法之一"></a>4.所有的文件都已经写好了，并且maven也导入成功，spring配置也没问题，启动主页以后总是显示404的解决办法之一</h4><p>点击相应项目或者模块</p>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210325095924555.png" alt="image-20210325095924555"></p>
<h2 id="Spring的web依赖的正确打开方式-配置以XML形式"><a href="#Spring的web依赖的正确打开方式-配置以XML形式" class="headerlink" title="Spring的web依赖的正确打开方式(配置以XML形式)"></a>Spring的web依赖的正确打开方式(配置以XML形式)</h2><h4 id="1-导入maven依赖"><a href="#1-导入maven依赖" class="headerlink" title="1.导入maven依赖"></a>1.导入maven依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210325102133691.png" alt="image-20210325102133691"></p>
<h4 id="2-配置web-xml"><a href="#2-配置web-xml" class="headerlink" title="2.配置web.xml"></a>2.配置web.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>/WEB-INF/web.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--    配置DispatchServlet:SpringMVC的核心：请求分发器，前端控制器--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--            关联spring-配置文件,直接在resources目录下新建即可--></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:application.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--        启动级别--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-在Resources目录下编写Spring配置文件ApplicationContext-xml"><a href="#3-在Resources目录下编写Spring配置文件ApplicationContext-xml" class="headerlink" title="3.在Resources目录下编写Spring配置文件ApplicationContext.xml"></a>3.在Resources目录下编写Spring配置文件ApplicationContext.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--处理器映射器--></span>
<span class="token comment">&lt;!--顾名思义：通过BeanNameUrl寻找bean对应的类--></span><span class="token comment">&lt;!--可以使用其他处理映射器--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--    处理器适配器--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!--    视图解析器--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--        前缀--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!--        后缀--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>事实上，真实开发中，并不需要显示指定处理器适配器和处理器映射器</p>
</blockquote>
<h4 id="4-编写Controller实现类"><a href="#4-编写Controller实现类" class="headerlink" title="4.编写Controller实现类"></a>4.编写Controller实现类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建Controller控制器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloControl</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//      创建ModelAndView对象</span>
        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//       添加msg属性[业务代码]</span>
        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"HelloController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//      设置其控制器的视图【视图跳转】</span>
        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//      返回模型与视图</span>
        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-编写Controller的视图hello-jsp"><a href="#5-编写Controller的视图hello-jsp" class="headerlink" title="5.编写Controller的视图hello.jsp"></a>5.编写Controller的视图hello.jsp</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
$&#123;msg&#125;

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-配置项目的Tomcat"><a href="#6-配置项目的Tomcat" class="headerlink" title="6.配置项目的Tomcat"></a>6.配置项目的Tomcat</h4><h4 id="7-启动服务即可"><a href="#7-启动服务即可" class="headerlink" title="7.启动服务即可"></a>7.启动服务即可</h4><h2 id="MVC执行原理-深究一下"><a href="#MVC执行原理-深究一下" class="headerlink" title="MVC执行原理(深究一下):"></a>MVC执行原理(深究一下):</h2><p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210325083919380.png" alt="image-20210325083919380"></p>
<p><em>模型装数据，视图封装跳转页面,返回给前端控制器</em></p>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210325103941359.png" alt="image-20210325103941359"></p>
<p><u>我们需要做的，只需要编写Controller,编写Spring配置，web.xml</u></p>
<h2 id="一个很恶心的地方"><a href="#一个很恶心的地方" class="headerlink" title="一个很恶心的地方"></a>一个很恶心的地方</h2><p><strong>就是当我第一次使用注解开发的时候，Tomcat总是找不到        <a href="http://www.springframework.org/schema/mvc">http://www.springframework.org/schema/mvc</a></strong><br>        <strong><a href="http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%8C">http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;这个文件，</a></strong><br><strong>然后这个坑大概卡了1天都没有解决，百度试了个遍都没有解决。</strong><br><strong>第二天我在spring的配置文件加上了<!DOCTYPE beans>,然后Tomcat告诉我另一个错误，它说识别不了beans.xml文件，</strong></p>
<p><strong><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326191337490.png" alt="image-20210326191337490"></strong></p>
<p><strong><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210326191408615.png" alt="image-20210326191408615">再然后我把刚刚加的<!DOCTYPE beans>给注释起来，发现可以了。</strong></p>
<p>配置代码：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token comment">&lt;!--&lt;!DOCTYPE beans>--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h2 id="spring-mvc-Annotation注解开发"><a href="#spring-mvc-Annotation注解开发" class="headerlink" title="spring mvc Annotation注解开发"></a>spring mvc Annotation注解开发</h2><h3 id="注解开发的spring-ApplicationContext-xml【固定写法，视图解析器可以更换】"><a href="#注解开发的spring-ApplicationContext-xml【固定写法，视图解析器可以更换】" class="headerlink" title="注解开发的spring-ApplicationContext.xml【固定写法，视图解析器可以更换】"></a>注解开发的spring-ApplicationContext.xml【固定写法，视图解析器可以更换】</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token comment">&lt;!--&lt;!DOCTYPE beans>--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--    自动扫描包，让指定包下的注解生效，由IOC容器统一管理--></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!--    视图解析器--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--        前缀--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment">&lt;!--        后缀--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><input checked="" disabled="" type="checkbox"> <blockquote>
<p>控制层只需要在相应的Controller实现类上加上@Controller注解，皆可<br>@RequestMapping()注解控制ModelAndView</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bin<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationControl</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//封装数据</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"AnnotationMVCTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//视图跳转</span>
        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//被视图解析器解析</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="RequestMapping的几种使用方法"><a href="#RequestMapping的几种使用方法" class="headerlink" title="@RequestMapping的几种使用方法"></a>@RequestMapping的几种使用方法</h2><p>1.默认方式</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//默认GET请求方式</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/demo1"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"Demo"</span><span class="token punctuation">;</span> <span class="token comment">//指定跳转页面文件，RequestMapping作用为取别名url</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> @RequestMapping(“/demo1”)加在返回值为String的方法上的效果默认为GET方式请求<br>通过查询@RequestMapping的源码可以知道</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RequestMapping</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token class-name">RequestMethod</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">consumes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">produces</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此处的name默认为空,后面的path和value定义的是跳转地址,method定义访问方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RequestMethod</span> <span class="token punctuation">&#123;</span>
    GET<span class="token punctuation">,</span>
    HEAD<span class="token punctuation">,</span>
    POST<span class="token punctuation">,</span>
    PUT<span class="token punctuation">,</span>
    PATCH<span class="token punctuation">,</span>
    DELETE<span class="token punctuation">,</span>
    OPTIONS<span class="token punctuation">,</span>
    TRACE<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="RESTFUL风格的URI如何实现"><a href="#RESTFUL风格的URI如何实现" class="headerlink" title="RESTFUL风格的URI如何实现?"></a>RESTFUL风格的URI如何实现?</h2> <pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/demo2/&#123;a&#125;/&#123;b&#125;"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Controller2:"</span><span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"Demo"</span><span class="token punctuation">;</span> <span class="token comment">//指定跳转页面文件，RequestMapping作用为取别名url</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>这种方法，使用最普通的RequestMapping进行跳转页面以及RESTFUL风格传参数,</strong><br><strong>通过@PathVariable注解标志回调函数的参数为前端需要传递的参数</strong></p>
<p><strong>另外,也可以直接使用@GetMapping来实现,略微简洁一些,两种方法的效果是一致的</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/demo2/&#123;a&#125;/&#123;b&#125;"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Controller3:"</span><span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"Demo"</span><span class="token punctuation">;</span> <span class="token comment">//指定跳转页面文件，RequestMapping作用为取别名url</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="类似的还有其他的几个关于mapping的注解"><a href="#类似的还有其他的几个关于mapping的注解" class="headerlink" title="类似的还有其他的几个关于mapping的注解"></a>类似的还有其他的几个关于mapping的注解</h2><p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210327230214845.png" alt="image-20210327230214845"></p>
<h3 id="关于Mapping注解代码的位置"><a href="#关于Mapping注解代码的位置" class="headerlink" title="关于Mapping注解代码的位置"></a>关于Mapping注解代码的位置</h3><blockquote>
<p>如果类上面注明了该注解,则该类的所有跳转界面URI都要有该注解的跳转页面名，例如以下的URI应为localhost:port/ProjectName/head/demo1即可跳转到Demo.jsp文件</p>
</blockquote>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210327230423881.png" alt="image-20210327230423881"></p>
<h2 id="转发与重定向"><a href="#转发与重定向" class="headerlink" title="转发与重定向"></a>转发与重定向</h2><p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328225236362.png" alt="image-20210328225236362"></p>
<blockquote>
<p>视图解析器的作用:在转发/重定向的时候自动拼接解析器里面给的主路径</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//有视图解析器的情况下的转发与重定向   </span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/h/m1"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span> <span class="token comment">//最简单的转发  </span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/h/m3"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span><span class="token comment">//重定向</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket到底是怎么一回事? -----MIDDLE</title>
    <url>/WebSocket/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="Node-js中的Socket–应用一"><a href="#Node-js中的Socket–应用一" class="headerlink" title="Node.js中的Socket–应用一"></a>Node.js中的Socket–应用一</h1><p>Node.js中的socket主要是由第三方模块socket.io实现的<br>所以本节重点分析socket的作用以及在node中如何使用socket.io</p>
<h2 id="安装socket-io"><a href="#安装socket-io" class="headerlink" title="安装socket.io"></a>安装socket.io</h2><p>ps:socket.io模块是一个特殊的模块，当你在项目文件夹npm安装了它，会发现在Module文件中找不到，实际上，当使用它的时候，socket.io.js会自动下载到项目中,我的理解是，npm只是安装了一个下载索引……</p>
<p><img src="https://r-ovo-stack.gitee.io/res2/sockettree.png"></p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install socket<span class="token punctuation">.</span>io@1  <span class="token operator">/</span><span class="token operator">/</span>@1指的是版本<span class="token punctuation">,</span>如果没有@1<span class="token punctuation">,</span>则默认安装最新版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> socket<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'socket.io'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="如何创建WebSocket服务器"><a href="#如何创建WebSocket服务器" class="headerlink" title="如何创建WebSocket服务器"></a>如何创建WebSocket服务器</h2><p><strong>以下每个步骤的注释纯属个人理解(–有更好的理解请纠正一下，谢谢–)</strong></p>
<h3 id="首先建立Web服务器"><a href="#首先建立Web服务器" class="headerlink" title="首先建立Web服务器"></a>首先建立Web服务器</h3><p>不懂http模块的可以看看我另一篇博客</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">
<span class="token comment">//以下代码我都写上了个人理解,所以你大可不必担心自己的node.js语法学得怎么怎么样</span>
<span class="token comment">//本博文重在思想</span>


<span class="token comment">//此处使用http模块</span>
<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>  <span class="token comment">//导入文件系统file system</span>
<span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'socket.io'</span><span class="token punctuation">)</span>

<span class="token comment">//创建web服务器</span>
<span class="token keyword">var</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//这里的res,req相信大家懂得都懂</span>
    <span class="token comment">//读取html页面</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'xxx.html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//这里我解释一下writeHead():200指代读取状态码，content-type可以理解为是对data的一种文档声明</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//data则是fs在html页面中读取的所有内容</span>
        <span class="token comment">//以上两句相当于加载了整个xxx.html页面</span>

        <span class="token comment">//注意，以上两层回调函数，应该理解为从里面开始回调，与递归嵌套的执行顺序一致</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后我们需要创建一个socket监听这个Web服务器app，故名思意，这便是创建Websocket服务器的一般流程</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> io<span class="token operator">=</span>socket<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
io<span class="token punctuation">.</span>sockets<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//我解释一下:</span>
<span class="token comment">//io便是Websocket服务器,然后后面的connection指的是监听事件</span>
<span class="token comment">//sockets是io的一个属性</span>
<span class="token comment">//.on()便是建立的意思,当用户在客户端发起socket请求（connection）,便会触发该function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么，我们的WebSocket服务器便创建好了,接下来我说一下如何连接socket<br>这里我使用html随意写一个客户端,注意前后端的io要一致</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//关键代码</span>
<span class="token comment">//在html页面中首先需要导入刚才的js脚本,注意这里我并没有刻意使用exports创建模块</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"xxx.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment">//此处的window.onload事件为页面加载完成再运行的意思，自动触发</span>
    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> socket <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//连接socket</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么一个简单的socket会话系统就编写完成了<br>接下来我们来看一下Websocket事件有哪些</p>
<p>Socket.io模块中的事件<br>connection : 连接客户端时，触发该事件<br>disconnect : 断开客户端连接，触发该事件<br><em>//可以想象我们使用qq的时候是不是也是类似的体验</em></p>
<table>
<thead>
<tr>
<th>事件名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>connection</td>
<td align="center">连接客户端时，触发该事件</td>
</tr>
<tr>
<td>disconnect</td>
<td align="center">断开客户端连接，触发该事件</td>
</tr>
<tr>
<td></td>
<td align="center"></td>
</tr>
</tbody></table>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">socket<span class="token punctuation">.</span>io中的方法 <span class="token operator">||</span> 事件和方法是不一样的哦<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<table>
<thead>
<tr>
<th>方法名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>on()</td>
<td align="center">监听socket事件</td>
</tr>
<tr>
<td>emit()</td>
<td align="center">发送socket事件</td>
</tr>
<tr>
<td></td>
<td align="center"></td>
</tr>
</tbody></table>
<p><em><strong><u>哎，还是来个实例吧</u></strong></em></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//socketServer.js</span>

<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> socketio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'socket.io'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建Web服务器</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'HTMLPage.html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'Content'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">52273</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:52273'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建WebSocket服务器   socket服务器监听serverWeb服务器</span>
<span class="token keyword">var</span> io <span class="token operator">=</span> socketio<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//连接的同时，监听clientData事件</span>
io<span class="token punctuation">.</span>sockets<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'客户端已连接!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//相当于在监听的同时进行数据接收发送</span>
    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'clientData'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//输出客户端发来的信息</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'客户端发来信息: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//向客户端发送serverData事件和数据</span>
        <span class="token comment">// socket.emit('serverData',data);</span>
        io<span class="token punctuation">.</span>sockets<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'serverData'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//客户端代码</span>
<span class="token comment">//HTMLPage.html</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>head<span class="token operator">></span>
    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>
    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/socket.io/socket.io.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
    <span class="token operator">&lt;</span>script<span class="token operator">></span>
        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//连接socket</span>
            <span class="token keyword">var</span> socket<span class="token operator">=</span>io<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//监听服务器事件与数据</span>
            socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'serverData'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务端回馈信息: '</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//表单单击也属于实时监听</span>
            <span class="token comment">//创建表单单击事件</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//获取表单数据</span>
                <span class="token keyword">var</span> text<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token comment">//向服务器发送clientData事件和数据</span>
                socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'clientData'</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>
<span class="token operator">&lt;</span>body<span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> id<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"send"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">默认通信方式<span class="token punctuation">,</span>广播<span class="token operator">--</span>io<span class="token punctuation">.</span>sockets<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em><strong><u>演示一下过程吧:</u></strong></em> </p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>启动服务器
<span class="token number">2.</span>浏览器开两个窗口都进入 http<span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">127.0.0.1:52273</span><span class="token regex-delimiter">/</span></span>
<span class="token number">3.</span>windowA 发送消息<span class="token constant">A</span>
<span class="token number">4.</span>windowB 发送消息<span class="token constant">B</span>
<span class="token number">5.</span>windowA 发送消息<span class="token constant">C</span>
我们看看最后的结果<span class="token operator">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>服务器端:</p>
<p><img src="https://r-ovo-stack.gitee.io/res2/server1.png"></p>
<p>客户A:</p>
<p><img src="https://r-ovo-stack.gitee.io/res2/cliA.png"></p>
<p>客户B:</p>
<p><img src="https://r-ovo-stack.gitee.io/res2/cliB.png"></p>
<h2 id="socket通信类型"><a href="#socket通信类型" class="headerlink" title="socket通信类型"></a>socket通信类型</h2><h3 id="Node-js中的socket-io通信类型"><a href="#Node-js中的socket-io通信类型" class="headerlink" title="Node.js中的socket.io通信类型"></a>Node.js中的socket.io通信类型</h3><table>
<thead>
<tr>
<th align="left">方法名称</th>
<th>说明</th>
<th align="left">codeeg</th>
</tr>
</thead>
<tbody><tr>
<td align="left">public</td>
<td>向所有客户端传递数据(包括自己)</td>
<td align="left">io.sockets.emit(‘’, data)</td>
</tr>
<tr>
<td align="left">broadcast</td>
<td>向所有客户端传递数据(不包括自己)</td>
<td align="left">socket.broadcast.emit(‘’, data)</td>
</tr>
<tr>
<td align="left">private</td>
<td>向特定客户端传递数据</td>
<td align="left">io.sockets.to(id).emit(‘’, data)</td>
</tr>
<tr>
<td align="left">ps: private方式会随机选择客户端发送事件</td>
<td></td>
<td align="left"></td>
</tr>
</tbody></table>
<h1 id="java网络编程中的socket–应用二"><a href="#java网络编程中的socket–应用二" class="headerlink" title="java网络编程中的socket–应用二"></a>java网络编程中的socket–应用二</h1><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><h1 id="计算机网络中的socket–原理"><a href="#计算机网络中的socket–原理" class="headerlink" title="计算机网络中的socket–原理"></a>计算机网络中的socket–原理</h1><h2 id="未完待续-1"><a href="#未完待续-1" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      <categories>
        <category>前/后端</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Socket.io</tag>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery       ----MIDDLE</title>
    <url>/jQuery/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install jquery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>jQueryAPI:</p>
<p> <a href="https://jquery.cuishifeng.cn/index.html">https://jquery.cuishifeng.cn/index.html</a> </p>
<p><strong>在下载的包里面找到/module/dist/jquery-min.js即可</strong></p>
<h2 id="jquery工厂函数"><a href="#jquery工厂函数" class="headerlink" title="jquery工厂函数"></a>jquery工厂函数</h2><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><p><strong>$</strong></p>
<p><em><strong>在参数中使用$(‘div’)获取所有div</strong></em><br><em><strong>$(‘#username’)获取文档中ID属性值为username的一个元素</strong></em><br><em><strong>$(“.btn_grey”)获取文档中使用CSS类名为btn_grey的所有元素</strong></em></p>
<p><em><strong>总之，都是获取元素</strong></em></p>
<h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>head<span class="token operator">></span>
    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token constant">ID</span>选择器的实例<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>
    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type='button']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>		<span class="token comment">//为按钮绑定单击事件</span>
                <span class="token keyword">var</span> inputValue <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#testInput"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token comment">//获取文本框的值</span>
                <span class="token function">alert</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出文本框的值</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>
<span class="token operator">&lt;</span>body background<span class="token operator">=</span><span class="token string">"bg.gif"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"testInput"</span> name<span class="token operator">=</span><span class="token string">"test"</span> value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"输入的值为"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
	<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type='button']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>			<span class="token comment">//为按钮绑定单击事件</span>
			<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"&lt;img src='images/strawberry1.jpg'/>这里长出了一片草莓"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//获取第一个div元素</span>
			<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;img src='images/fish1.jpg'/>这里的鱼没有了"</span><span class="token punctuation">;</span>	<span class="token comment">//获取第二个div元素</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token comment">//eq和get都是通过索引获取元素对象的方法,从0开始......</span>
<span class="token comment">//eq()返回的是一个jquery包装集合，这能用jquery方法,.html()和innerHTNL的作用都是设置元素的html内容</span>
<span class="token comment">//get()返回一个DOM对象，只能用DOM对象的方法</span>

<span class="token comment">//$(document).ready()为当页面元素载入完成之后就会自动执行程序,为按钮绑定事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="类名选择器-class"><a href="#类名选择器-class" class="headerlink" title="类名选择器(.class)"></a>类名选择器(.class)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
	<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">var</span> myClass <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".myClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  			 	<span class="token comment">//选取DOM元素</span>
		myClass<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"#C50210"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//为选取的DOM元素设置背景颜色</span>
		myClass<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"#FFF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">//为选取的DOM元素设置文字颜色</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="混合选择器"><a href="#混合选择器" class="headerlink" title="混合选择器"></a>混合选择器</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=button]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//绑定按钮的单击事件</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div,#span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加所使用的CSS类</span>
            <span class="token comment">//复合（混合）选择 addClass()方法,这届动态添加CSS样式</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器(*)"></a>通配符选择器(*)</h3><p><strong>直接获取所有元素</strong></p>
<p><em><strong>取得所有DOM元素返回jQuery包装集</strong></em></p>
<h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"copyright"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">//为div元素的子元素ul添加样式</span>
			<span class="token comment">//层级选择器</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>


    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#change"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>	<span class="token comment">//绑定“换肤”按钮的单击事件</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"form>input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//为表单元素的直接子元素input添加样式</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#default"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>	<span class="token comment">//绑定“恢复默认”按钮的单击事件</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"form>input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//移除为表单元素的直接子元素input添加的样式</span>
                <span class="token comment">//>与" "的区别在于它是直接子元素</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
	<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"label+p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为匹配的元素添加CSS类</span>
        <span class="token comment">//两个元素是紧跟在一起的....才被选择f</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
	<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div~p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为匹配的元素添加CSS类</span>
        <span class="token comment">//表示div和p要为同级,并且在它后面,不在div内部才被选择</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tr:even"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"even"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//设置奇数行所用的CSS类</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tr:odd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"odd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//设置偶数行所用的CSS类</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tr:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"even"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//移除even类</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tr:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"th"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//添加th类</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>


<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"td:parent"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token string">"#E8F3D1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//为不为空的单元格设置背景颜色</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"td:empty"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"暂无内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//为空的单元格添加默认内容</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"td:contains('mjh')"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//将含有文本mjh的单元格的文字颜色设置为红色</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//隐藏选中的复选框</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input:disabled"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"我是不可用的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//为灰色不可用按钮赋值</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">selectVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>							 <span class="token comment">//下拉菜单变化时执行的函数</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select option:selected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//显示选中的值</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>


<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span> <span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">//选中复选框</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":radio"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span> <span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>						<span class="token comment">//选中单选按钮</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":image"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"images/fish1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">//设置图片路径</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":file"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>									<span class="token comment">//隐藏文件域</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>							<span class="token comment">//设置密码域的值</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"文本框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">//设置文本框的值</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span> <span class="token string">"disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">//设置按钮不可用</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":reset"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"重置按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>							<span class="token comment">//设置重置按钮的值</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":submit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"提交按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>						<span class="token comment">//设置提交按钮的值</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#testDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input:hidden:eq(1)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//显示隐藏域的值</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>


<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"JS/jquery-3.2.1.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tbody tr:even"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"odd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tbody tr:odd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"even"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tbody tr"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span>
            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h2><h3 id="常用过滤器"><a href="#常用过滤器" class="headerlink" title="常用过滤器"></a>常用过滤器</h3><table>
<thead>
<tr>
<th>过滤器</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>:first</td>
<td align="center">匹配第一个和eq()get()类似</td>
</tr>
<tr>
<td>:last</td>
<td align="center">匹配最后</td>
</tr>
<tr>
<td>:even</td>
<td align="center">索引从0开始的偶数索引元素</td>
</tr>
<tr>
<td>:odd</td>
<td align="center">索引奇数元素</td>
</tr>
<tr>
<td>:header</td>
<td align="center">匹配标题元素</td>
</tr>
<tr>
<td>:animated</td>
<td align="center">匹配正在执行动效的元素</td>
</tr>
</tbody></table>
<h3 id="内容过滤"><a href="#内容过滤" class="headerlink" title="内容过滤"></a>内容过滤</h3><table>
<thead>
<tr>
<th>过滤器</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>:contains(text)</td>
<td align="center">匹配包含text元素</td>
</tr>
<tr>
<td>:empty</td>
<td align="center">空元素</td>
</tr>
<tr>
<td>:has(selector)</td>
<td align="center">含有选择器所匹配元素</td>
</tr>
<tr>
<td>:parent</td>
<td align="center">有儿子或文本的元素</td>
</tr>
</tbody></table>
<h3 id="表单对象属性过滤"><a href="#表单对象属性过滤" class="headerlink" title="表单对象属性过滤"></a>表单对象属性过滤</h3><table>
<thead>
<tr>
<th>过滤器</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>:checked</td>
<td align="center">所有被选中</td>
</tr>
<tr>
<td>:disabled</td>
<td align="center">所有不可用</td>
</tr>
<tr>
<td>:enabled</td>
<td align="center">所有可用</td>
</tr>
<tr>
<td>:selected</td>
<td align="center">所有选中的option元素</td>
</tr>
</tbody></table>
<h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><table>
<thead>
<tr>
<th>选择器</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>:first-child</td>
<td align="center">匹配给定元素的第一个儿子(不是它自己)</td>
</tr>
<tr>
<td>:last-child</td>
<td align="center">匹配最后一个儿子</td>
</tr>
<tr>
<td>:only-child</td>
<td align="center">匹配元素中唯一的子元[$(“ul li:only-child”)匹配只含有一个li元素的Ul元素中的Li]</td>
</tr>
</tbody></table>
<h3 id="属性选择"><a href="#属性选择" class="headerlink" title="属性选择"></a>属性选择</h3><table>
<thead>
<tr>
<th>选择器</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>$(“div[name]”)</td>
<td align="center">匹配含有name属性的div</td>
</tr>
<tr>
<td>$(“div[name=’terst’]”)</td>
<td align="center">匹配iname属性是test的div</td>
</tr>
<tr>
<td>$(“div[name!=’terst’]”)</td>
<td align="center">不是test的div</td>
</tr>
<tr>
<td>$(“div[name*=’terst’]”)</td>
<td align="center">包含test</td>
</tr>
<tr>
<td>$(“div[name^=’terst’]”)</td>
<td align="center">name从terst开始的div</td>
</tr>
<tr>
<td>$(“div[name$=’terst’]”)</td>
<td align="center">以terst结尾的div</td>
</tr>
<tr>
<td>$(“div[id][name=’terst’]”)</td>
<td align="center">匹配具有id属性且name属性是test的div</td>
</tr>
</tbody></table>
<h3 id="表单选择器-1"><a href="#表单选择器-1" class="headerlink" title="表单选择器"></a>表单选择器</h3><table>
<thead>
<tr>
<th>选择器</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>:input</td>
<td align="center">所有input</td>
</tr>
<tr>
<td>:button</td>
<td align="center">所有button</td>
</tr>
<tr>
<td>:checkbox</td>
<td align="center">所有box</td>
</tr>
<tr>
<td>:file</td>
<td align="center">所有文件域</td>
</tr>
<tr>
<td>:hidden</td>
<td align="center">所有不可见元素,或type=hidden</td>
</tr>
<tr>
<td>:image</td>
<td align="center">所有图像域</td>
</tr>
<tr>
<td>:password</td>
<td align="center">所有密码域(这个常用)</td>
</tr>
<tr>
<td>:radio</td>
<td align="center">所有单选按钮</td>
</tr>
<tr>
<td>:reset</td>
<td align="center">所欲重置按钮</td>
</tr>
<tr>
<td>:submit</td>
<td align="center">所有提交按钮</td>
</tr>
<tr>
<td>:text</td>
<td align="center">所有单行文本框</td>
</tr>
</tbody></table>
<h2 id="操控页面"><a href="#操控页面" class="headerlink" title="操控页面"></a>操控页面</h2><h3 id="操控元素内容值"><a href="#操控元素内容值" class="headerlink" title="操控元素内容值"></a>操控元素内容值</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"clock"</span><span class="token operator">></span>xxxx<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token comment">//输出：</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//设置</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"new xxxxxxxxxx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="操控html"><a href="#操控html" class="headerlink" title="操控html"></a>操控html</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span>内写标签内部代码<span class="token punctuation">,</span>不包含标签本体<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><em>text()和html()方法是不同的，text()的内容不会被转义成Html页面</em></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"&lt;span style='color:#FF0000'>重新设置的文本内容&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为&lt;div>标记重新设置文本内容</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"&lt;span style='color:#FF0000'>重新设置的HTML内容&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为&lt;div>标记重新设置HTML内容</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="操控元素值"><a href="#操控元素值" class="headerlink" title="操控元素值"></a>操控元素值</h3><table>
<thead>
<tr>
<th>方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>val()</td>
<td align="center">获取第一个匹配元素的当前值</td>
</tr>
<tr>
<td>val(val)</td>
<td align="center">修改所有匹配元素的值</td>
</tr>
<tr>
<td>val(arrVal)</td>
<td align="center">用于checkbox,select,radio[$(“select”).val([1][2][3]);让1,2,3处于被选中状态]</td>
</tr>
</tbody></table>
<h3 id="操控DOM节点"><a href="#操控DOM节点" class="headerlink" title="操控DOM节点"></a>操控DOM节点</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">
<span class="token comment">//ps: $ 符号代表这是一行jQuery语句，并不是所谓的php中的变量............</span>

<span class="token comment">//元素内部插入</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">"&lt;p>A&lt;/p>"</span><span class="token punctuation">)</span>  id为<span class="token constant">B</span>的元素内容前添加一个段落
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token string">"#A"</span><span class="token punctuation">)</span> 将id为<span class="token constant">B</span>的元素添加到id为<span class="token constant">A</span>的元素前面
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;p>A&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"#B"</span><span class="token punctuation">)</span>  <span class="token comment">//将A追加到B中</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;p>A&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 向<span class="token constant">B</span>中追加指定内容

<span class="token comment">//元素外部插入</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">"&lt;p>A&lt;/p>"</span><span class="token punctuation">)</span> 匹配元素之前插入
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">"&lt;p>A&lt;/p>"</span><span class="token punctuation">)</span> <span class="token constant">B</span>后面添加一个段落

<span class="token comment">//删除节点</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".m"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//删除所有子节点,匹配元素本身不被删除</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//删除匹配的所有元素</span>

<span class="token comment">//复制节点</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//复制自己，但不复制事件</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//复制自己+事件</span>

<span class="token comment">//替换dfas</span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token string">"&lt;div>替换结果&lt;/div>"</span><span class="token punctuation">)</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;div>替换结果&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"#div2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//上述二者效果一致,仅仅表现方式不同而已</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="jQuery操作CSS属性"><a href="#jQuery操作CSS属性" class="headerlink" title="jQuery操作CSS属性"></a>jQuery操作CSS属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token string">"xxx"</span><span class="token operator">:</span><span class="token string">"zxxxx"</span><span class="token punctuation">,</span>
    <span class="token string">"xxx3"</span><span class="token operator">:</span><span class="token string">"xxxx"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="jQuery事件绑定"><a href="#jQuery事件绑定" class="headerlink" title="jQuery事件绑定"></a>jQuery事件绑定</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">
<span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'option'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//永久</span>
obj<span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token string">'option'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//一次性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="悬浮事件"><a href="#悬浮事件" class="headerlink" title="悬浮事件"></a>悬浮事件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">hover</span><span class="token punctuation">(</span>over<span class="token punctuation">,</span>out<span class="token punctuation">)</span>
<span class="token comment">//over,out都是函数，相当于 同时绑定两个匿名函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="元素的可见性操作"><a href="#元素的可见性操作" class="headerlink" title="元素的可见性操作"></a>元素的可见性操作</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">obj<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>可见
obj<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>不可见<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">obj<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>  time内隐藏完毕 <span class="token operator">/</span>ms
obj<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>  time内显示完毕  <span class="token operator">/</span>ms

obj<span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>  time内淡入效果<span class="token punctuation">,</span>逐渐看见
obj<span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>  time内淡出效果<span class="token punctuation">,</span>逐渐看不见
obj<span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span>val<span class="token punctuation">)</span> time内将不透明度调整到val<span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span>之间的数

<span class="token comment">//滑动显示匹配的元素</span>
obj<span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">,</span>向下滑动增加元素高度显示匹配的元素
obj<span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">,</span>向上减少元素高度以达到隐藏元素的效果

obj<span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">,</span>自动切换元素可见性<span class="token punctuation">,</span>一旦触发事件则动态变化  
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//animate(params,speed);</span>
eg<span class="token operator">:</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"obj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>top<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>top<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>
explain<span class="token operator">:</span>给定一个目标状态<span class="token punctuation">,</span>jQuery会以动画形式来展现它的页面变化过程<span class="token operator">!</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>和雯雯在一起,每天都很开心</title>
    <url>/wenwen/</url>
    <content><![CDATA[<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><blockquote>
<p>4 | 5</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910622.jpg" alt="1619246910622" style="zoom:5%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910620.jpg" alt="1619246910620" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910617.jpg" alt="1619246910617" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910615.jpg" alt="1619246910615" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910612.jpg" alt="1619246910612" style="zoom:5%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910610.jpg" alt="1619246910610" style="zoom:5%;" />





<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910608.jpg" alt="1619246910608" style="zoom:5%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910606.jpg" alt="1619246910606" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910604.jpg" alt="1619246910604" style="zoom:5%;" />





<blockquote>
<p>4-8</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910602.jpg" alt="1619246910602" style="zoom:5%;" />





<blockquote>
<p>4-9</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910600.jpg" alt="1619246910600" style="zoom:5%;" />





<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910598.jpg" alt="1619246910598" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910595.jpg" alt="1619246910595" style="zoom:5%;" />



<blockquote>
<p>4-11</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246910593.jpg" alt="1619246910593" style="zoom:15%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619248765821.jpg" alt="1619248765821" style="zoom:5%;" />





<blockquote>
<p>4-15</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718314.jpg" alt="1619246718314" style="zoom:5%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718312.jpg" alt="1619246718312" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718310.jpg" alt="1619246718310" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718307.jpg" alt="1619246718307" style="zoom:5%;" />





<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718305.jpg" alt="1619246718305" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718303.jpg" alt="1619246718303" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718301.jpg" alt="1619246718301" style="zoom:5%;" />





<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718299.jpg" alt="1619246718299" style="zoom:5%;" />





<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718296.jpg" alt="1619246718296" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718294.jpg" alt="1619246718294" style="zoom:5%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718292.jpg" alt="1619246718292" style="zoom:5%;" />





<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718290.jpg" alt="1619246718290" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718288.jpg" alt="1619246718288" style="zoom:5%;" />





<blockquote>
<p> 4-17</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718284.jpg" alt="1619246718284" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718282.jpg" alt="1619246718282" style="zoom:5%;" />





<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718280.jpg" alt="1619246718280" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718277.jpg" alt="1619246718277" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718276.jpg" alt="1619246718276" style="zoom:5%;" />




<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619254585596.jpg" alt="1619246718276" style="zoom:5%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718273.jpg" alt="1619246718276" style="zoom:5%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718271.jpg" alt="1619246718276" style="zoom:5%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246718269.jpg" alt="1619246718276" style="zoom:5%;" />





<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594938.jpg" alt="1619246594938" style="zoom:5%;" />



<blockquote>
<p>4-19</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594933.jpg" alt="1619246594933" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594931.jpg" alt="1619246594931" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594936.jpg" alt="1619246594936" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594929.jpg" alt="1619246594929" style="zoom:15%;" />





<blockquote>
<p>4-20</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619255061105.jpg" alt="1619255061105" style="zoom:15%;" />



<blockquote>
<p>4-21</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594921.jpg" alt="1619246594921" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594919.jpg" alt="1619246594919" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594917.jpg" alt="1619246594917" style="zoom:5%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594915.jpg" alt="1619246594915" style="zoom:15%;" />





<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594913.jpg" alt="1619246594913" style="zoom:15%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594911.jpg" alt="1619246594911" style="zoom:15%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594907.jpg" alt="1619246594907" style="zoom:15%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594905.jpg" alt="1619246594905" style="zoom:15%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594902.jpg" alt="1619246594902" style="zoom:15%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594898.jpg" alt="1619246594898" style="zoom:15%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594896.jpg" alt="1619246594896" style="zoom:15%;" />



<blockquote>
<p>吃饭饭</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594900.jpg" alt="1619246594900" style="zoom:15%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594909.jpg" alt="1619246594909" style="zoom:15%;" />





<blockquote>
<p>4-22</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594890.jpg" alt="1619246594890" style="zoom:25%;" />





<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594888.jpg" alt="1619246594888" style="zoom:25%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594882.jpg" alt="1619246594882" style="zoom:15%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619246594878.jpg" alt="1619246594878" style="zoom:25%;" />
---
]]></content>
      <categories>
        <category>love</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="指针链表"><a href="#指针链表" class="headerlink" title="指针链表"></a>指针链表</h3><h4 id="单链表-java描述"><a href="#单链表-java描述" class="headerlink" title="单链表(java描述)"></a>单链表(java描述)</h4><p>概念: 每个节点之间以一个指针相连,每个节点存储指向下一个节点的地址的指针,尾节点的指针域置空</p>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328124128585.png" alt="image-20210328124128585" style="zoom:50%;" />

<p>节点定义:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Type</span> data<span class="token punctuation">;</span> <span class="token comment">//数据域</span>
	<span class="token class-name">Node</span> next<span class="token punctuation">;</span> <span class="token comment">//指针域</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>单链表定义:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LinkList</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Node</span> <span class="token class-name">Head</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//存储头节点地址</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>几项基本操作：</p>
<blockquote>
<p>初始化:构建一个空表，创建一个头节点，不存储数据，指针置空</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328124657562.png" alt="image-20210328124657562" style="zoom:50%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328124715697.png" alt="image-20210328124715697" style="zoom:50%;" />

<pre class="line-numbers language-java" data-language="java"><code class="language-java">bool <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	head<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> head<span class="token punctuation">)</span>  <span class="token comment">//直接生成头节点并记录地址</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	head<span class="token operator">-></span>next<span class="token operator">=</span><span class="token keyword">null</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>头插法(插入顺序与链表遍历顺序相反):</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328125827299.png" alt="image-20210328125827299" style="zoom:67%;" />

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Node</span> <span class="token class-name">HeadInsert</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Node</span> temp<span class="token operator">=</span>head<span class="token punctuation">;</span>
	<span class="token class-name">S</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token class-name">S</span><span class="token punctuation">)</span>  
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token class-name">S</span><span class="token punctuation">.</span>next<span class="token operator">=</span>temp<span class="token punctuation">;</span>
	head<span class="token operator">=</span><span class="token class-name">S</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>尾插法(单次Insert代码)</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Node</span> <span class="token class-name">TailInsert</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">//寻找尾巴</span>
	<span class="token class-name">Node</span> flag<span class="token operator">=</span>head<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token operator">-></span>next<span class="token punctuation">)</span>
		flag<span class="token operator">=</span>flag<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token class-name">S</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token class-name">S</span><span class="token punctuation">)</span>  
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token class-name">S</span><span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
	flag<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token class-name">S</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>如果是多次尾插，则只需要寻找一次尾巴，每次尾插以后刷新尾巴节点即可</p>
</blockquote>
<blockquote>
<p>一些注意事项：<br>链表的头指针不可以随意移动，如果需要用指针移动，可以定义一个指针变量进行操作,多数在遍历链表时需要进行类似的操作</p>
</blockquote>
<blockquote>
<p>查找：</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">bool <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span><span class="token class-name">Type</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Node</span> flag<span class="token operator">=</span>head<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> flag<span class="token operator">-></span>data<span class="token operator">!=</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		flag<span class="token operator">=</span>flag<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>中间插入:</p>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328131919332.png" alt="image-20210328131919332" style="zoom:50%;" />
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在第i个节点之前插入(包含空头节点的链表,头节点属于第0个节点的情况下)</span>
bool <span class="token class-name">MiddleInsert</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">Node</span> flag<span class="token operator">=</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
        flag<span class="token operator">=</span>flag<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//找到第i-1个节点</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">S</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token class-name">S</span><span class="token punctuation">)</span>  
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">S</span><span class="token operator">-></span>next<span class="token operator">=</span>flag<span class="token operator">-></span>next<span class="token punctuation">;</span>
    flag<span class="token operator">-></span>next<span class="token operator">=</span><span class="token class-name">S</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>删除中间节点</p>
</blockquote>
<p><strong><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328133145723.png" alt="image-20210328133145723" style="zoom:50%;" /></strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//删除第i个节点</span>
bool <span class="token class-name">MiddleDel</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Node</span> flag<span class="token operator">=</span>head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        i<span class="token operator">--</span><span class="token punctuation">;</span>
        flag<span class="token operator">=</span>flag<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//找到第i-1个节点</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>
    	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    flag<span class="token operator">-></span>next<span class="token operator">=</span>flag<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">//如果在C++环境下,需要记录第i个节点: Node temp=flag->next; delete(temp);</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>双向链表的操作基本和单链表一致，以及循环链表，循环双向链表等等</p>
</blockquote>
<p>双向链表节点定义:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DoubleNode</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Type</span> data<span class="token punctuation">;</span>
	<span class="token class-name">DoubleNode</span> next<span class="token punctuation">;</span>
	<span class="token class-name">DoubleNode</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="顺序栈（java描述"><a href="#顺序栈（java描述" class="headerlink" title="顺序栈（java描述)"></a>顺序栈（java描述)</h3><p>顺序栈的类定义</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SqStack</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> base<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> top<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>初始化</p>
</blockquote>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328135659049.png" alt="image-20210328135659049" style="zoom:25%;" /><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328135540636.png" alt="image-20210328135540636" style="zoom:33%;" /></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//top永远指向栈顶，并且top地址不存储元素</span>
bool  <span class="token class-name">Init</span><span class="token punctuation">(</span><span class="token class-name">SqStack</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">S</span><span class="token punctuation">.</span>base<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//分配一个Maxsize容量的数组</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">S</span><span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token class-name">S</span><span class="token punctuation">.</span>top<span class="token operator">=</span><span class="token class-name">S</span><span class="token punctuation">.</span>base<span class="token punctuation">;</span> <span class="token comment">//Base同时存储了数组的首地址也是第一个数组元素的地址</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>入栈</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">bool <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">SqStack</span> <span class="token class-name">S</span><span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span>top<span class="token operator">-</span><span class="token class-name">S</span><span class="token punctuation">.</span>base<span class="token operator">==</span><span class="token class-name">Maxsize</span><span class="token punctuation">)</span> <span class="token comment">//栈满,栈满也可以表示为 S.top==Maxsize</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">S</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">.</span>top<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>出栈</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">bool <span class="token function">pop</span><span class="token punctuation">(</span><span class="token class-name">SqStack</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span>base<span class="token operator">==</span><span class="token class-name">S</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token comment">//栈空</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	top<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token comment">//此处有需要的话也可以设置一个变量记录刚刚出栈的栈顶的值</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="链栈-java描述"><a href="#链栈-java描述" class="headerlink" title="链栈(java描述)"></a>链栈(java描述)</h3><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328142057306.png" alt="image-20210328142057306" style="zoom:33%;" />

<p>链栈类定义</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Snode</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Type</span> data<span class="token punctuation">;</span>
	<span class="token class-name">Snode</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">LinkStack</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Snode</span> <span class="token class-name">S</span><span class="token punctuation">;</span>  <span class="token comment">//存储栈顶</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>初始化</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
bool <span class="token class-name">InitStack</span><span class="token punctuation">(</span><span class="token class-name">LinkStack</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">S</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//记录栈顶</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>入栈</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">bool <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">LinkStack</span> <span class="token class-name">S</span><span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">LinkStack</span> p<span class="token punctuation">;</span>
	p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Snode</span><span class="token punctuation">;</span> <span class="token comment">//生成新的节点</span>
	p<span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>
	p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token class-name">S</span><span class="token punctuation">;</span>  <span class="token comment">//将新节点的next指针指向S,S的地址赋值给新节点的指针域</span>
	<span class="token class-name">S</span><span class="token operator">=</span>p<span class="token punctuation">;</span>  <span class="token comment">//修改栈顶</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>出栈</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">bool <span class="token function">pop</span><span class="token punctuation">(</span><span class="token class-name">LinkStack</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">LinkStack</span> p<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">S</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//栈空</span>
    <span class="token class-name">S</span><span class="token operator">=</span><span class="token class-name">S</span><span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">//如果在C++环境中，则需要使用p记录原来的栈顶S,并delete(p);</span>
            
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="队列-FIFO-–First-In-First-Out"><a href="#队列-FIFO-–First-In-First-Out" class="headerlink" title="队列(FIFO)–First In First Out"></a>队列(FIFO)–First In First Out</h2><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><p>定义：采用一段连续的空间存储数据元素,并用两个整型变量记录队头和队尾元素的下标</p>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328143159629.png" alt="image-20210328143159629" style="zoom:50%;" />

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//队空:Q.front=Q.rear,尾索引永远指向空区域</span>
<span class="token comment">//队满: </span>
<span class="token keyword">class</span> <span class="token class-name">SqQueue</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Type</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//定义数组存储数据</span>
	<span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>  <span class="token comment">//记录队头队尾</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>入队:</p>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328144940455.png" alt="image-20210328144940455" style="zoom:50%;" />

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//front不变,rear-front=队列当前有效元素数量(有效长度),rear++</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>出队:</p>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328144913427.png" alt="image-20210328144913427" style="zoom:50%;" />

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//rear不变,front++,rear-front=队列当前有效元素数量(有效长度)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>假溢出问题: 当队尾指针已经指向了队尾，此时无法进行入队操作（由于front只增不减，rear只增不减），倘若前面有多余的空间会造成空间浪费(假溢出),此时Q.rear+1=MaxSize</p>
<blockquote>
<p>解决办法 :  如图所示，rear指向了队列以外的空间，正确的做法是，将rear指向0号位才符合规范</p>
<p>诟病 : 即便rear指向0，当继续入队，会出现Q.rear==Q.front的情况，此时无法判度是队空还是队满,又引发了新的问题</p>
<p>解决办法 : 使用循环队列   </p>
</blockquote>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328145949879.png" alt="image-20210328145949879" style="zoom:50%;" />

<h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328151311872.png" alt="image-20210328151311872" style="zoom:50%;" />



<blockquote>
<p>循环队列特点:队空:Q.front==Q.rear<br>当Q.rear+1=Maxsize,(Q.rear+1)%Maxsize=0,倘若(Q.rear+1)%Maxsize=Q.front，则为队满状态</p>
</blockquote>
<blockquote>
<p>Q.data[Q.rear]=x;  //将x丢入Q.rear所指向的空间<br>Q.rear=(Q.rear+1)%Maxsize; //Q.rear后移</p>
</blockquote>
<p>循环队列的入队:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">bool <span class="token class-name">EnQueue</span><span class="token punctuation">(</span><span class="token class-name">SqQueue</span> <span class="token class-name">Q</span><span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token class-name">Maxsize</span><span class="token operator">==</span><span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//队满</span>
    <span class="token comment">//Q.rear始终指向循环队列的空间以内</span>
    <span class="token class-name">Q</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>
    <span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token class-name">Maxsize</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>循环队列的出队:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">bool <span class="token class-name">DeQueue</span><span class="token punctuation">(</span><span class="token class-name">SqQueue</span> <span class="token class-name">Q</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token operator">==</span><span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token class-name">Maxsize</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">//有需要的话可以保存出队元素</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>计算队列的有效长度</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token class-name">QueueLength</span><span class="token punctuation">(</span><span class="token class-name">SqQueue</span> <span class="token class-name">Q</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">-</span><span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token operator">+</span><span class="token class-name">Maxsize</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token class-name">Maxsize</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h3><p>ps:链队需要有一个头节点,借助单链表的定义很容易实现相关代码<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328155620826.png" alt="image-20210328155620826" style="zoom:50%;" /></p>
<p><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328160711802.png" alt="image-20210328160711802"></p>
<p>链队定义:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Qnode</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Type</span> data<span class="token punctuation">;</span>
	<span class="token class-name">Qnode</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">LinkQueue</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Qnode</span> front<span class="token punctuation">;</span>
	<span class="token class-name">Qnode</span> rear<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>链队入队:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token class-name">Init</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token class-name">LinkQueue</span> <span class="token class-name">Q</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Qnode</span><span class="token punctuation">;</span>  <span class="token comment">//创建头节点,头指针和尾指针指向头节点</span>
	<span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">EnQueue</span><span class="token punctuation">(</span><span class="token class-name">LinkQueue</span> <span class="token class-name">Q</span><span class="token punctuation">,</span><span class="token class-name">Type</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Qnode</span> node<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Qnode</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
	node<span class="token operator">-></span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">-></span>next<span class="token operator">=</span>node<span class="token punctuation">;</span>
	<span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">=</span>node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>链队出队:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">bool <span class="token class-name">Dequeue</span><span class="token punctuation">(</span><span class="token class-name">LinkQueue</span> <span class="token class-name">Q</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//删除队头元素</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">==</span><span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token class-name">Qnode</span> p<span class="token operator">=</span><span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">//记录队头节点</span>
	<span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//头节点不变,队头后移</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">==</span>p<span class="token punctuation">&#123;</span> <span class="token comment">//如果队列中只有一个元素,删除后需要修改队尾指针,即回到初始状态,Q.front和Q.rear均指向头节点</span>
		<span class="token class-name">Q</span><span class="token punctuation">.</span>rear<span class="token operator">=</span><span class="token class-name">Q</span><span class="token punctuation">.</span>front<span class="token punctuation">;</span>    
	<span class="token punctuation">&#125;</span>
	
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="双端队列"><a href="#双端队列" class="headerlink" title="*双端队列"></a>*双端队列</h3><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="关于树的一些基本概念"><a href="#关于树的一些基本概念" class="headerlink" title="关于树的一些基本概念()"></a>关于树的一些基本概念()</h3><img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328163013167.png" alt="image-20210328163013167"  />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328162800131.png" alt="image-20210328162800131" style="zoom:80%;" />



<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328162830129.png" alt="image-20210328162830129" style="zoom:80%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/image-20210328162901803.png" alt="image-20210328162901803" style="zoom:67%;" />

<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h3 id="二叉树操作算法"><a href="#二叉树操作算法" class="headerlink" title="二叉树操作算法"></a>二叉树操作算法</h3>]]></content>
      <categories>
        <category>基本功</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>锦句</title>
    <url>/%E9%94%A6/</url>
    <content><![CDATA[<blockquote>
<p>一块钱的打火机也能点着1万块的香烟，几万块钱一桌的菜，他还是离不开几块钱一包的盐</p>
</blockquote>
]]></content>
      <categories>
        <category>便签</category>
      </categories>
      <tags>
        <tag>金句</tag>
      </tags>
  </entry>
  <entry>
    <title>XmlHttpRequest -----BASE</title>
    <url>/xmlhttprequest/</url>
    <content><![CDATA[<p><em><strong><u>以下简称XmlHttpRequest为XHR</u></strong></em></p>
<h2 id="XHR-如何获取数据"><a href="#XHR-如何获取数据" class="headerlink" title="XHR 如何获取数据"></a>XHR 如何获取数据</h2><h3 id="获取服务器的字符串响应的属性"><a href="#获取服务器的字符串响应的属性" class="headerlink" title="获取服务器的字符串响应的属性"></a>获取服务器的字符串响应的属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> text<span class="token operator">=</span>XHRObject<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="获取XML响应的属性"><a href="#获取XML响应的属性" class="headerlink" title="获取XML响应的属性"></a>获取XML响应的属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> XMLdoc<span class="token operator">=</span>XHRObject<span class="token punctuation">.</span>responseXML<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="返回HTTP、状态码的属性"><a href="#返回HTTP、状态码的属性" class="headerlink" title="返回HTTP、状态码的属性"></a>返回HTTP、状态码的属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> status<span class="token operator">=</span>XMLObject<span class="token punctuation">.</span>status<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="返回请求状态的属性"><a href="#返回请求状态的属性" class="headerlink" title="返回请求状态的属性"></a>返回请求状态的属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> state <span class="token operator">=</span> XMLObject<span class="token punctuation">.</span>readyState<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h3 id="指定状态改变时触发的时间处理器的属性"><a href="#指定状态改变时触发的时间处理器的属性" class="headerlink" title="指定状态改变时触发的时间处理器的属性"></a>指定状态改变时触发的时间处理器的属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//PS: 这个有点重要</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
XHRObject<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span>fun<span class="token punctuation">;</span>  <span class="token comment">//当状态改变时执行的函数fun</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="请求状态的属性"><a href="#请求状态的属性" class="headerlink" title="请求状态的属性"></a>请求状态的属性</h3><table>
<thead>
<tr>
<th>值</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td align="center">未初始化</td>
</tr>
<tr>
<td>1</td>
<td align="center">正在家子啊</td>
</tr>
<tr>
<td>2</td>
<td align="center">已经加载</td>
</tr>
<tr>
<td>3</td>
<td align="center">交互中</td>
</tr>
<tr>
<td>4</td>
<td align="center">完成</td>
</tr>
</tbody></table>
<h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><table>
<thead>
<tr>
<th>值</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td>100</td>
<td align="center">继续发送请求</td>
</tr>
<tr>
<td>200</td>
<td align="center">请求已经成功</td>
</tr>
<tr>
<td>202</td>
<td align="center">请求被接受，但是还没有成功</td>
</tr>
<tr>
<td>400</td>
<td align="center">错误的请求</td>
</tr>
<tr>
<td>404</td>
<td align="center">文件未找到</td>
</tr>
<tr>
<td>408</td>
<td align="center">请求超时</td>
</tr>
<tr>
<td>500</td>
<td align="center">内部服务器错误</td>
</tr>
<tr>
<td>501</td>
<td align="center">服务器不支持当前请求所需要的某个功能</td>
</tr>
</tbody></table>
<h2 id="XHR-的一些基本操作–open-send-…"><a href="#XHR-的一些基本操作–open-send-…" class="headerlink" title="XHR 的一些基本操作–open(),send()…"></a>XHR 的一些基本操作–open(),send()…</h2><h3 id="open-—-创建新请求"><a href="#open-—-创建新请求" class="headerlink" title="open()  — 创建新请求"></a>open()  — 创建新请求</h3><p><em><strong><u>open()用于设置进行异步请求目标的URL，(URL可以是各种类型文件),请求方法以及其他参数信息</u></strong></em></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">,</span><span class="token string">"URL"</span><span class="token punctuation">[</span><span class="token punctuation">,</span>asyncFlag<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token string">"UserName"</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token string">"PassWord"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="open-方法的一些常用参数"><a href="#open-方法的一些常用参数" class="headerlink" title="open()方法的一些常用参数"></a>open()方法的一些常用参数</h3><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">method</td>
<td align="center">用于指定请求类型,GET　or  POST</td>
</tr>
<tr>
<td align="center">URL</td>
<td align="center">用于指定请求地址,可以是绝对也可以是相对地址，可以传递查询字符串</td>
</tr>
<tr>
<td align="center">asyncFlag</td>
<td align="center">可选参数，用于指定请求方式，异步为true,同步为false,默认为true</td>
</tr>
<tr>
<td align="center">userName</td>
<td align="center">可选，用于指定用户名，可以忽略</td>
</tr>
<tr>
<td align="center">password</td>
<td align="center">可选，用于指定前请求密码，没有可以忽略</td>
</tr>
</tbody></table>
<h5 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">
XMRObject<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"index.html"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="send-—-向服务器发送请求"><a href="#send-—-向服务器发送请求" class="headerlink" title="send()  — 向服务器发送请求"></a>send()  — 向服务器发送请求</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">send</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><em><strong><u>content用于指定发送的数据,类型多样,包括”DOM”,输入流，字符串,可以为null</u></strong></em></p>
<h3 id="设置请求的http头的方法"><a href="#设置请求的http头的方法" class="headerlink" title="设置请求的http头的方法"></a>设置请求的http头的方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="停止或这放弃当前异步请求的方法"><a href="#停止或这放弃当前异步请求的方法" class="headerlink" title="停止或这放弃当前异步请求的方法"></a>停止或这放弃当前异步请求的方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">XHRObject<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="返回HTTP头信息"><a href="#返回HTTP头信息" class="headerlink" title="返回HTTP头信息"></a>返回HTTP头信息</h3><h4 id="指定属性"><a href="#指定属性" class="headerlink" title="指定属性"></a>指定属性</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">XHRObject<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">"headerLabel"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="所有信息"><a href="#所有信息" class="headerlink" title="所有信息"></a>所有信息</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">XHRObject<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="如何创建一个XHR对象–-XHR不是一个W3C标准，针对不同浏览的的初始化仿佛是不同的"><a href="#如何创建一个XHR对象–-XHR不是一个W3C标准，针对不同浏览的的初始化仿佛是不同的" class="headerlink" title="如何创建一个XHR对象–(XHR不是一个W3C标准，针对不同浏览的的初始化仿佛是不同的)"></a>如何创建一个XHR对象–(XHR不是一个W3C标准，针对不同浏览的的初始化仿佛是不同的)</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> xmlHttp<span class="token punctuation">;</span>				           		<span class="token comment">//定义XMLHttpRequest对象</span>
<span class="token keyword">function</span> <span class="token function">createXmlHttpRequestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            xmlHttp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>			               		<span class="token comment">//如果在Mozilla或其他的浏览器下运行</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            xmlHttp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>xmlHttp<span class="token punctuation">)</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"返回创建的对象或显示错误信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> xmlHttp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="XMR对象获取XML文件内容"><a href="#XMR对象获取XML文件内容" class="headerlink" title="XMR对象获取XML文件内容"></a>XMR对象获取XML文件内容</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="gb2312"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>nameTag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">></span></span>numberTag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>number</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tel</span><span class="token punctuation">></span></span>telTag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tel</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js">xmlHttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> StatHandler<span class="token punctuation">;</span>		<span class="token comment">//指定回调函数</span>
xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"index.xml"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	     	<span class="token comment">//调用index.xml文件</span>
xmlHttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> xmlRoot <span class="token operator">=</span> xmlHttp<span class="token punctuation">.</span>responseXML<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>  <span class="token comment">//获取XML的DOM对象</span>
    <span class="token keyword">var</span> xmlItem <span class="token operator">=</span> xmlRoot<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> xmlName <span class="token operator">=</span> xmlItem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> xmlNumber <span class="token operator">=</span> xmlItem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> xmlTel <span class="token operator">=</span> xmlItem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"tel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> txt <span class="token operator">=</span> <span class="token string">"INFO:"</span><span class="token punctuation">;</span>
    txt <span class="token operator">+=</span> xmlName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>
    txt <span class="token operator">+=</span> xmlNumber<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>
    txt <span class="token operator">+=</span> xmlTel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"webpage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> txt<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>Ajax</tag>
        <tag>XmlHttpRequest</tag>
      </tags>
  </entry>
  <entry>
    <title>Changsha itinerary selection</title>
    <url>/%E9%95%BF%E6%B2%99%E8%A1%8C%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="五一出行游玩行程安排-给老婆做选择用的"><a href="#五一出行游玩行程安排-给老婆做选择用的" class="headerlink" title="五一出行游玩行程安排 - 给老婆做选择用的"></a>五一出行游玩行程安排 - 给老婆做选择用的</h1><blockquote>
<p>住宿啥的可以再考虑，车次比较重要哈</p>
</blockquote>
<h2 id="长沙"><a href="#长沙" class="headerlink" title="长沙"></a>长沙</h2><blockquote>
</blockquote>
<h3 id="我目前考虑过的住宿"><a href="#我目前考虑过的住宿" class="headerlink" title="我目前考虑过的住宿"></a>我目前考虑过的住宿</h3><blockquote>
<p>tip ： 以下费用均考虑总费用哈</p>
</blockquote>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><blockquote>
<ol>
<li></li>
</ol>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619231341627.jpg" alt="1619231341627" style="zoom: 33%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619231341631.jpg" alt="1619231341631" style="zoom: 33%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/Screenshot_2021-04-24-10-35-25-228_com.Qunar.jpg" alt="Screenshot_2021-04-24-10-35-25-228_com.Qunar" style="zoom:33%;" />



<blockquote>
<p>2.</p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619231509970.jpg" alt="1619231509970" style="zoom: 33%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619231509966.jpg" alt="1619231509966" style="zoom: 33%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619231509960.jpg" alt="1619231509960" style="zoom: 33%;" />

<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619231509975.jpg" alt="1619231509975" style="zoom:33%;" />

<h3 id="火车车次"><a href="#火车车次" class="headerlink" title="火车车次"></a>火车车次</h3><blockquote>
<p> 考虑高铁 | 不考虑高铁</p>
<p>我的想法 :  如果考虑高铁，昌沙线二等座人均价157左右，两个人的话就是300.</p>
<p>去：</p>
<blockquote>
<p>倘若考虑高铁，我们可以三号早一点坐高铁过去.这样去得快，然后</p>
</blockquote>
<blockquote>
<p>不考虑高铁,2号中午过去，住3晚住宿。住宿一共300左右</p>
<p>不过，我还是不太希望去的时候坐高铁。</p>
</blockquote>
<blockquote>
<p>回</p>
<blockquote>
<p>从长沙回南昌由于车次实在有点少。。。。</p>
</blockquote>
</blockquote>
</blockquote>
<p>3号从长沙回南昌的车次如下：</p>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/IMG_20210424_104849.jpg" alt="IMG_20210424_104849" style="zoom:33%;" />



<blockquote>
<p> 方案一  </p>
</blockquote>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/1619231201798.jpg" alt="1619231201798" style="zoom:33%;" />
我们乘坐2号的火车,中午13点的车,下午17点到长沙。
再去住处，考虑3,4号的出行。

<blockquote>
<p>方案二</p>
</blockquote>
<p>咱俩乘坐3号中午的火车 – 不考虑高铁</p>
<img src="https://blogbin.oss-cn-beijing.aliyuncs.com/blog/IMG_20210424_103844.jpg" alt="IMG_20210424_103844" style="zoom:33%;" />

<p>这样的话，我直接候补车票。</p>
<p>下午5点到长沙。去预定的住处，然后晚上出去逛逛。计划4号的出行。</p>
<blockquote>
<p>回</p>
<blockquote>
<p>可以考虑高铁。因为车次确实比较少。</p>
</blockquote>
</blockquote>
<h3 id="出行费用"><a href="#出行费用" class="headerlink" title="出行费用"></a>出行费用</h3><blockquote>
<p>3号出发 : 60 * 2 + 100 * 2 + 157 * 2  ||  60 * 2  = 634 || 440  (R)<br>2号出发: 60 * 2 + 100 * 3 + 157 * 2  ||  60 * 2  = 734 || 540  (R)</p>
</blockquote>
<blockquote>
<p>其他费用另算哈</p>
</blockquote>
<blockquote>
<p>长沙那边的景点大多数免费。其他费用不会太多。<br>主要花费还是在出行上 。<br>宝</p>
</blockquote>
<p>当然,住宿我也考虑了别的地方，我们先把时间定好哈。<br>雯雯乖哈</p>
<h2 id="婺源"><a href="#婺源" class="headerlink" title="婺源"></a>婺源</h2><p>​    5月份的婺源已经没有油菜花啦。树叶也没有红。只有古建筑和自然风景以及古镇可以看看。</p>
<p>可能没有想像中那样有趣了。</p>
<p>按我了解的婺源，哥哥认为以后开车自驾游比较方便一点。。那边的交通不是特别方便。然后就是现在花期已经过了，体验可能没有那么好哈。</p>
<p>最好是3-4月，或者秋季去那里比较好呀。</p>
<p>去的话，我也查了攻略。。。。算了，给你打了电话，就不写这个哈</p>
<h2 id="庐山"><a href="#庐山" class="headerlink" title="庐山"></a>庐山</h2><p>要不还是夏天再去那吧，久闻的避暑去处。</p>
]]></content>
      <categories>
        <category>tourism</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>长沙</tag>
      </tags>
  </entry>
</search>
